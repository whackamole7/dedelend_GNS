{
  "address": "0x0154c34F9f38D2EC0Aa2BaCc8088eeB8f5f41d83",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address[4]",
          "name": "_arrLongHegicStrategy",
          "type": "address[4]"
        },
        {
          "internalType": "address[4]",
          "name": "_arrShortHegicStrategy",
          "type": "address[4]"
        },
        {
          "internalType": "contract IERC721",
          "name": "_collateralToken",
          "type": "address"
        },
        {
          "internalType": "contract IHegicOperationalTreasury",
          "name": "_operationalPool",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_USDC",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minBorrowLimit",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_ltv",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_COLLATERAL_DECIMALS",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_PriorLiqPriceCoef",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "userReturn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolReturn",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liqFee",
          "type": "uint256"
        }
      ],
      "name": "ExerciseByPriorLiqPrice",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolProfit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liqFee",
          "type": "uint256"
        }
      ],
      "name": "ForcedExercise",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "poolProfit",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liqFee",
          "type": "uint256"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "optionID",
          "type": "uint256"
        }
      ],
      "name": "Unlock",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COLLATERAL_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "INTEREST_RATE_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LTV",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LTV_DECIMALS",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PriorLiqPriceCoef",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "USDC",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "borrowedByOption",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "borrowed",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "newBorrowTimestamp",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "calculateUpcomingFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "upcomingFee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "collateralInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "strategyAddress",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "strike",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isLong",
              "type": "bool"
            }
          ],
          "internalType": "struct DDL.optionInfo",
          "name": "strategy",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralToken",
      "outputs": [
        {
          "internalType": "contract IERC721",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "currentLiqPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "exerciseByPriorLiqPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "forcedExercise",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "liqPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "loanState",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "loanStateByPriorLiqPrice",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "lockOption",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "maxBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "operationalPool",
      "outputs": [
        {
          "internalType": "contract IHegicOperationalTreasury",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pool",
      "outputs": [
        {
          "internalType": "contract IPoolDDL",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "priorLiqPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "profitByOption",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setInterestRate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setInterestRateDecimals",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setLTV",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "setMinBorrowLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "setPool",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "strategyType",
      "outputs": [
        {
          "internalType": "enum DDL.HegicStrategyType",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "unlock",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b67a830655bb0da30bc8d459d214ed02e8c973db430d0fbe6e7c0a15aabd2a1",
  "receipt": {
    "to": null,
    "from": "0x0641bc55DDAb3b9636e82CbF87EDE3c3c533039d",
    "contractAddress": "0x0154c34F9f38D2EC0Aa2BaCc8088eeB8f5f41d83",
    "transactionIndex": 1,
    "gasUsed": "11779179",
    "logsBloom": "0x
    "blockHash": "0x280b22c0292bb5bb0178a9ccb3cc8bdd2dbc0ab8a0f8a18ae90efdfd1ade6b6e",
    "transactionHash": "0x0b67a830655bb0da30bc8d459d214ed02e8c973db430d0fbe6e7c0a15aabd2a1",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 27258078,
        "transactionHash": "0x0b67a830655bb0da30bc8d459d214ed02e8c973db430d0fbe6e7c0a15aabd2a1",
        "address": "0x0154c34F9f38D2EC0Aa2BaCc8088eeB8f5f41d83",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000000641bc55ddab3b9636e82cbf87ede3c3c533039d"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x280b22c0292bb5bb0178a9ccb3cc8bdd2dbc0ab8a0f8a18ae90efdfd1ade6b6e"
      }
    ],
    "blockNumber": 27258078,
    "cumulativeGasUsed": "11779179",
    "status": 1,
    "byzantium": true
  },
  "args": [
    [
      "0xA321404B708682531B2a959c52AA8A53F35A14AE",
      "0xc8715eAB195CE1dF628ce3B89B63F3849a55Ffe9",
      "0x9F7e2a3dcf8Ba93B00EE5d3aF2419ebc1DBb6256",
      "0xAc28e549e5D61Ecb586f7FEE51Bcbf454591b082"
    ],
    [
      "0x83305A6B2B906704Ed042CBEFAfe94DBc3f185DD",
      "0xB3C9DEac7c37d7144f61166baf91f5682fae7338",
      "0x824081Cd6397aBD018cfc039440594b832De8d2c",
      "0x7a4aF7AAF60292461098edDFA63e4095144331ff"
    ],
    "0x5B53d56c5a63ebBE852D9D911b7886A4338953f1",
    "0xB0F9F032158510cd4a926F9263Abc86bAF7b4Ab3",
    "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
    1000000,
    5000,
    8,
    3
  ],
  "numDeployments": 1,
  "solcInputHash": "5f1699bd8d1774dc9c092814512a9850",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address[4]\",\"name\":\"_arrLongHegicStrategy\",\"type\":\"address[4]\"},{\"internalType\":\"address[4]\",\"name\":\"_arrShortHegicStrategy\",\"type\":\"address[4]\"},{\"internalType\":\"contract IERC721\",\"name\":\"_collateralToken\",\"type\":\"address\"},{\"internalType\":\"contract IHegicOperationalTreasury\",\"name\":\"_operationalPool\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_USDC\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minBorrowLimit\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_ltv\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_COLLATERAL_DECIMALS\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_PriorLiqPriceCoef\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"userReturn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolReturn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqFee\",\"type\":\"uint256\"}],\"name\":\"ExerciseByPriorLiqPrice\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqFee\",\"type\":\"uint256\"}],\"name\":\"ForcedExercise\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"poolProfit\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liqFee\",\"type\":\"uint256\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"optionID\",\"type\":\"uint256\"}],\"name\":\"Unlock\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COLLATERAL_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"INTEREST_RATE_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LTV\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LTV_DECIMALS\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PriorLiqPriceCoef\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"USDC\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"borrowedByOption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowed\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"newBorrowTimestamp\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"calculateUpcomingFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"upcomingFee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"collateralInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"strategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"strike\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"}],\"internalType\":\"struct DDL.optionInfo\",\"name\":\"strategy\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralToken\",\"outputs\":[{\"internalType\":\"contract IERC721\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currentLiqPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"exerciseByPriorLiqPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"forcedExercise\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"liqPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"loanState\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"loanStateByPriorLiqPrice\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"lockOption\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"maxBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"operationalPool\",\"outputs\":[{\"internalType\":\"contract IHegicOperationalTreasury\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pool\",\"outputs\":[{\"internalType\":\"contract IPoolDDL\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"priorLiqPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"profitByOption\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInterestRate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setInterestRateDecimals\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setLTV\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"setMinBorrowLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setPool\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"strategyType\",\"outputs\":[{\"internalType\":\"enum DDL.HegicStrategyType\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"unlock\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/DDL.sol\":\"DDL\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.7.0;\\n\\ninterface AggregatorV3Interface {\\n\\n  function decimals() external view returns (uint8);\\n  function description() external view returns (string memory);\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n}\\n\",\"keccak256\":\"0x78af5c13ec137bdbb22ec9d65c730fb6f138d3a61a3fdbb63be4838ce7faf2a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x0b606994df12f0ce35f6d2f6dcdde7e55e6899cdef7e00f180980caa81e3844e\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xed6a749c5373af398105ce6ee3ac4763aa450ea7285d268c85d9eeca809cdb1f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xaf159a8b1923ad2a26d516089bceca9bdeaeacd04be50983ea00ba63070f08a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/DDL.sol\":{\"content\":\"// SPDX-License-Identifier: RANDOM_TEXT\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"./IHegicOperationalTreasury.sol\\\";\\nimport \\\"./IHegicStrategy.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./IPoolDDL.sol\\\";\\n\\ncontract DDL is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    uint256 public LTV;\\n    uint256 public LTV_DECIMALS = 10**4;\\n\\n    IERC721 public collateralToken;\\n    IHegicOperationalTreasury public operationalPool;\\n    IERC20 public USDC;\\n\\n    uint256 public interestRate = 19025875190258754083880960;\\n    uint256 public INTEREST_RATE_DECIMALS = 10**30;\\n\\n    uint256 public minBorrowLimit;\\n    uint256 public COLLATERAL_DECIMALS;\\n\\n    uint256 public PriorLiqPriceCoef;\\n\\n    IPoolDDL public pool;\\n\\n    struct BorrowedByOption {\\n        uint256 borrowed;\\n        uint256 newBorrowTimestamp;\\n    }\\n    struct optionInfo {\\n        address strategyAddress;\\n        uint256 amount;\\n        uint256 strike;\\n        uint256 expiration;\\n        bool isLong;\\n    }\\n    struct CollateralInfo {\\n        address owner;\\n        optionInfo strategy;\\n    }\\n\\n    enum HegicStrategyType {\\n        Invalid,\\n        Long,\\n        Short\\n    }\\n\\n    mapping(uint256 => CollateralInfo) public collateralInfo;\\n    mapping(uint256 => BorrowedByOption) public borrowedByOption;\\n    mapping(address => HegicStrategyType) public strategyType;\\n\\n    event Borrow(\\n        address indexed user,\\n        uint256 indexed optionID,\\n        uint256 amount,\\n        address strategy,\\n        uint256 timestamp\\n    );\\n    event Repay(address indexed user, uint256 indexed optionID, uint256 amount);\\n    event Liquidate(\\n        address indexed user,\\n        uint256 indexed optionID,\\n        uint256 amount,\\n        uint256 poolProfit,\\n        uint256 liqFee\\n    );\\n    event Unlock(address indexed user, uint256 indexed optionID);\\n    event ForcedExercise(\\n        address indexed user,\\n        uint256 indexed optionID,\\n        uint256 amount,\\n        uint256 poolProfit,\\n        uint256 liqFee\\n    );\\n    event ExerciseByPriorLiqPrice(\\n        address indexed user,\\n        uint256 indexed optionID,\\n        uint256 userReturn,\\n        uint256 poolReturn,\\n        uint256 liqFee\\n    );\\n\\n    constructor(\\n        address[4] memory _arrLongHegicStrategy,\\n        address[4] memory _arrShortHegicStrategy,\\n        IERC721 _collateralToken,\\n        IHegicOperationalTreasury _operationalPool,\\n        IERC20 _USDC,\\n        uint256 _minBorrowLimit,\\n        uint256 _ltv,\\n        uint256 _COLLATERAL_DECIMALS,\\n        uint256 _PriorLiqPriceCoef\\n    ) {\\n        for (uint256 i = 0; i < _arrLongHegicStrategy.length; i++) {\\n            strategyType[_arrLongHegicStrategy[i]] = HegicStrategyType.Long;\\n        }\\n        for (uint256 i = 0; i < _arrShortHegicStrategy.length; i++) {\\n            strategyType[_arrShortHegicStrategy[i]] = HegicStrategyType.Short;\\n        }\\n        collateralToken = _collateralToken;\\n        operationalPool = _operationalPool;\\n        USDC = _USDC;\\n        minBorrowLimit = _minBorrowLimit;\\n        LTV = _ltv;\\n        COLLATERAL_DECIMALS = 10**_COLLATERAL_DECIMALS;\\n        PriorLiqPriceCoef = _PriorLiqPriceCoef;\\n    }\\n\\n    function setLTV(uint256 value) external onlyOwner {\\n        require(value <= 8000, \\\"invalid value\\\");\\n        LTV = value;\\n    }\\n\\n    function setInterestRate(uint256 value) external onlyOwner {\\n        interestRate = value;\\n    }\\n\\n    function setInterestRateDecimals(uint256 value) external onlyOwner {\\n        INTEREST_RATE_DECIMALS = value;\\n    }\\n\\n    function setMinBorrowLimit(uint256 value) external onlyOwner {\\n        minBorrowLimit = value;\\n    }\\n\\n    function setPool(address value) external onlyOwner {\\n        pool = IPoolDDL(value);\\n    }\\n\\n    function lockOption(uint256 id) external {\\n        require(pool.openDeDeLend(), \\\"pauseDeDeLend\\\");\\n        (\\n            IHegicOperationalTreasury.LockedLiquidityState state,\\n            address strategy,\\n            ,\\n            ,\\n            uint32 expiration\\n        ) = operationalPool.lockedLiquidity(id);\\n        require(block.timestamp <= uint256(expiration) - 60*60, \\\"too late\\\");\\n        (uint128 amount, uint128 strike) = IHegicStrategy(strategy)\\n            .strategyData(id);\\n        require(\\n            state == IHegicOperationalTreasury.LockedLiquidityState.Locked,\\n            \\\"option is active\\\"\\n        );\\n        require(collateralToken.ownerOf(id) == msg.sender, \\\"you not owner\\\");\\n        require(\\n            strategyType[strategy] != HegicStrategyType.Invalid,\\n            \\\"strategy not supported\\\"\\n        );\\n        collateralToken.transferFrom(msg.sender, address(this), id);\\n        bool isLong = strategyType[strategy] == HegicStrategyType.Long ? true: false;\\n        collateralInfo[id] = CollateralInfo(\\n            msg.sender,\\n            optionInfo(\\n                strategy,\\n                uint256(amount),\\n                uint256(strike),\\n                uint256(expiration),\\n                isLong\\n            )\\n        );\\n    }\\n\\n    function maxBorrowLimit(uint256 id) public view returns (uint256) {\\n        return (profitByOption(id) / LTV_DECIMALS) * LTV;\\n    }\\n\\n    function borrow(uint256 id, uint256 amount) external {\\n        require(pool.openDeDeLend(), \\\"pauseDeDeLend\\\");\\n        BorrowedByOption storage data = borrowedByOption[id];\\n        uint256 maxLimit = maxBorrowLimit(id);\\n        (\\n            IHegicOperationalTreasury.LockedLiquidityState state,\\n            ,\\n            ,\\n            ,\\n\\n        ) = operationalPool.lockedLiquidity(id);\\n        uint256 totalBalance = pool.getTotalBalance(); \\n        require(amount >= minBorrowLimit, \\\"amount less minBorrowLimit\\\");\\n        require(amount + data.borrowed <= maxLimit, \\\"amount + data.borrowed less maxLimit\\\");\\n        require(state == IHegicOperationalTreasury.LockedLiquidityState.Locked, \\\"invalid state\\\");\\n        require(msg.sender == collateralInfo[id].owner, \\\"you are not the owner\\\");\\n        require(amount <= totalBalance, \\\"there is not enough money in the pool\\\");\\n        require(block.timestamp <= collateralInfo[id].strategy.expiration - 60*60, \\\"too late\\\");\\n        if (collateralInfo[id].strategy.isLong) {\\n            require(currentPrice(id) > priorLiqPrice(id), \\\"the price is too low\\\");\\n        } else {\\n            require(currentPrice(id) < priorLiqPrice(id), \\\"the price is too high\\\");\\n        }\\n        uint256 upcomingFee = calculateUpcomingFee(id);\\n        borrowedByOption[id] = BorrowedByOption(\\n            amount + data.borrowed + upcomingFee,\\n            block.timestamp\\n        );\\n        pool.addTotalLocked(amount + upcomingFee);\\n        pool.send(collateralInfo[id].owner, amount);\\n        emit Borrow(\\n            msg.sender,\\n            id,\\n            amount,\\n            collateralInfo[id].strategy.strategyAddress,\\n            block.timestamp\\n        );\\n    }\\n\\n    function liquidate(uint256 id) external {\\n        require(loanState(id), \\\"invalid price\\\");\\n        BorrowedByOption storage data = borrowedByOption[id];\\n        uint256 profit = profitByOption(id);\\n        exerciseOption(id);\\n        uint256 diff = 0;\\n        pool.subTotalLocked(data.borrowed);\\n        if (profit > data.borrowed) {\\n            diff = profit - data.borrowed;\\n            USDC.transfer(address(pool), data.borrowed+diff*90/100);\\n            USDC.transfer(msg.sender, diff*10/100);\\n        } else {\\n            USDC.transfer(address(pool), profit);\\n        }\\n        emit Liquidate(\\n            collateralInfo[id].owner,\\n            id,\\n            data.borrowed,\\n            diff*90/100,\\n            diff*10/100\\n        );\\n    }\\n\\n    function forcedExercise(uint256 id) external {\\n        require(\\n            block.timestamp > collateralInfo[id].strategy.expiration - 30 * 60\\n        );\\n        BorrowedByOption storage data = borrowedByOption[id];\\n        uint256 profit = profitByOption(id);\\n        exerciseOption(id);\\n        uint256 diff = 0;\\n        pool.subTotalLocked(data.borrowed);\\n        if (profit > data.borrowed) {\\n            diff = profit - data.borrowed;\\n            USDC.transfer(address(pool), data.borrowed+diff*90/100);\\n            USDC.transfer(msg.sender, diff*10/100);\\n        } else {\\n            USDC.transfer(address(pool), profit);\\n        }\\n        emit ForcedExercise(\\n            collateralInfo[id].owner,\\n            id,\\n            data.borrowed,\\n            diff*90/100,\\n            diff*10/100\\n        );\\n    }\\n\\n    function exerciseByPriorLiqPrice(uint256 id) external {\\n        require(loanStateByPriorLiqPrice(id), \\\"invalid price\\\");\\n        BorrowedByOption storage data = borrowedByOption[id];\\n        uint256 profit = profitByOption(id);\\n        exerciseOption(id);\\n        pool.subTotalLocked(data.borrowed);\\n        USDC.transfer(address(pool), data.borrowed);\\n        USDC.transfer(collateralInfo[id].owner, profit - (data.borrowed + data.borrowed*10/100));\\n        USDC.transfer(msg.sender, data.borrowed*10/100);\\n        emit ExerciseByPriorLiqPrice(\\n            collateralInfo[id].owner,\\n            id,\\n            profit - (data.borrowed + data.borrowed*10/100),\\n            data.borrowed,\\n            data.borrowed*10/100\\n        );\\n    }\\n\\n    function calculateUpcomingFee(uint256 id)\\n        public\\n        view\\n        returns (uint256 upcomingFee)\\n    {\\n        BorrowedByOption storage data = borrowedByOption[id];\\n        uint256 periodInMinutes = (block.timestamp - data.newBorrowTimestamp) /\\n            60;\\n        upcomingFee =\\n            ((data.borrowed / 100) * (periodInMinutes * interestRate)) /\\n            INTEREST_RATE_DECIMALS;\\n    }\\n\\n    function repay(uint256 id, uint256 amount) external {\\n        require(borrowedByOption[id].borrowed > 0, \\\"option redeemed\\\");\\n        uint256 upcomingFee = calculateUpcomingFee(id);\\n        require(\\n            amount <= borrowedByOption[id].borrowed + upcomingFee,\\n            \\\"too much amount\\\"\\n        );\\n        require(msg.sender == collateralInfo[id].owner);\\n        uint256 newBorrow = borrowedByOption[id].borrowed +\\n            upcomingFee -\\n            amount;\\n        pool.subTotalLocked(amount - upcomingFee);\\n        borrowedByOption[id] = BorrowedByOption(\\n            newBorrow,\\n            block.timestamp\\n        );\\n        USDC.transferFrom(collateralInfo[id].owner, address(this), amount);\\n        USDC.transfer(address(pool), amount);\\n        emit Repay(msg.sender, id, amount);\\n    }\\n\\n    function unlock(uint256 id) external {\\n        require(borrowedByOption[id].borrowed == 0, \\\"option is blocked\\\");\\n        collateralToken.transferFrom(\\n            address(this),\\n            collateralInfo[id].owner,\\n            id\\n        );\\n        emit Unlock(msg.sender, id);\\n    }\\n\\n    function loanState(uint256 id) public view returns (bool) {\\n        CollateralInfo storage collateral = collateralInfo[id];\\n        if (collateral.strategy.isLong) {\\n            return currentPrice(id) <= liqPrice(id);\\n        } else {\\n            return currentPrice(id) >= liqPrice(id);\\n        }\\n    }\\n\\n    function loanStateByPriorLiqPrice(uint256 id) public view returns (bool) {\\n        CollateralInfo storage collateral = collateralInfo[id];\\n        if (collateral.strategy.isLong) {\\n            return currentPrice(id) <= priorLiqPrice(id);\\n        } else {\\n            return currentPrice(id) >= priorLiqPrice(id);\\n        }\\n    }\\n\\n    function currentPrice(uint256 id) public view returns (uint256 price) {\\n        CollateralInfo storage data = collateralInfo[id];\\n        (, int256 latestPrice, , , ) = IHegicStrategy(\\n            data.strategy.strategyAddress\\n        ).priceProvider().latestRoundData();\\n        price = uint256(latestPrice);\\n    }\\n\\n    function priorLiqPrice(uint256 id) public view returns (uint256 price) {\\n        (\\n            ,\\n            address strategy,\\n            ,\\n            ,\\n        ) = operationalPool.lockedLiquidity(id);\\n        (, uint128 strike) = IHegicStrategy(strategy).strategyData(id);\\n        if (collateralInfo[id].strategy.isLong) {\\n            return uint256(strike)*(100+PriorLiqPriceCoef)/100; \\n        } \\n        return uint256(strike)*(100-PriorLiqPriceCoef)/100;\\n    }\\n    function liqPrice(uint256 id) public view returns (uint256 price) {\\n        BorrowedByOption storage optionData = borrowedByOption[id];\\n        CollateralInfo storage data = collateralInfo[id];\\n        (\\n            ,\\n            address strategy,\\n            ,\\n            ,\\n        ) = operationalPool.lockedLiquidity(id);\\n        (uint128 amount, uint128 strike) = IHegicStrategy(strategy)\\n        .strategyData(id);\\n        if (data.strategy.isLong) {\\n            return uint256(strike) + (optionData.borrowed*COLLATERAL_DECIMALS)/(uint256(amount))*120;\\n        }\\n        return uint256(strike) - (optionData.borrowed*COLLATERAL_DECIMALS)/(uint256(amount))*120;\\n    }\\n\\n    function currentLiqPrice(uint256 id) public view returns (uint256 price) {\\n        CollateralInfo storage data = collateralInfo[id];\\n        if (data.strategy.isLong){\\n            if (priorLiqPrice(id) > liqPrice(id)) {\\n                return priorLiqPrice(id);\\n            }\\n            return liqPrice(id);\\n        }\\n        if (priorLiqPrice(id) < liqPrice(id)) {\\n            return priorLiqPrice(id);\\n        }\\n        return liqPrice(id);\\n    }\\n\\n    function profitByOption(uint256 id) public view returns (uint256 profit) {\\n        (,address strategy,,,) = operationalPool.lockedLiquidity(id);\\n        return IHegicStrategy(strategy).profitOf(id);\\n    }\\n\\n    function exerciseOption(uint256 id) private {\\n        CollateralInfo storage data = collateralInfo[id];\\n        return IHegicStrategy(data.strategy.strategyAddress).exercise(id);\\n    }\\n}\\n\",\"keccak256\":\"0x5647bab87c62d6ec4e3cc2c1941599e0f25633a9a03eb953db706317ef2e26e2\",\"license\":\"RANDOM\"},\"contracts/IHegicOperationalTreasury.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\ninterface IHegicOperationalTreasury {\\n    enum LockedLiquidityState {Unlocked, Locked}\\n\\n    function lockedLiquidity(uint256 id)\\n        external\\n        view\\n        returns (\\n            LockedLiquidityState state,\\n            address strategy,\\n            uint128 negativepnl,\\n            uint128 positivepnl,\\n            uint32 expiration\\n        );\\n}\\n\",\"keccak256\":\"0x4690046de7111ac32ee484fa830e015b8071268b183da10bc6e7a4af5486166e\"},\"contracts/IHegicStrategy.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\n import \\\"@chainlink/contracts/src/v0.7/interfaces/AggregatorV3Interface.sol\\\";\\n\\ninterface IHegicStrategy {\\n    function exercise(uint256 optionID) external;\\n\\n    function profitOf(uint256 optionID) external view returns (uint256 amount);\\n\\n    function priceProvider() external view returns (AggregatorV3Interface priceProvider);\\n\\n    function strategyData(uint256 id) external view returns (uint128 amount, uint128 strike);\\n}\\n\",\"keccak256\":\"0x263af5040cf9a86c1490a47077d1517a9726026216aa85643133d82282c0d886\"},\"contracts/IPoolDDL.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\ninterface IPoolDDL {\\n    function send(address to, uint amount) external;\\n    function getTotalBalance() external view returns (uint256 balance);\\n    function addTotalLocked(uint256 value) external;\\n    function subTotalLocked(uint256 value) external; \\n    function openDeDeLend() external view returns (bool openDeDeLend);\\n}\",\"keccak256\":\"0xc8ac2c3446c29742ebf558b0e7b67c715d00fd3db64455f83d730f72d6dbcd5c\"}},\"version\":1}",
  "bytecode": "0x60806040526127106002556a0fbce2c2bf9557000000006006556c0c9f2c9cd04674edea400000006007553480156200003757600080fd5b5060405162003010380380620030108339810160408190526200005a91620002c4565b6200006533620001d0565b60005b6004811015620000e5576001600e60008c84600481106200008d576200008d620004cb565b602090810291909101516001600160a01b03168252810191909152604001600020805460ff19166001836002811115620000cb57620000cb620004b5565b021790555080620000dc8162000481565b91505062000068565b5060005b600481101562000166576002600e60008b84600481106200010e576200010e620004cb565b602090810291909101516001600160a01b03168252810191909152604001600020805460ff191660018360028111156200014c576200014c620004b5565b0217905550806200015d8162000481565b915050620000e9565b50600380546001600160a01b03808a166001600160a01b03199283161790925560048054898416908316179055600580549288169290911691909117905560088490556001839055620001bb82600a620003b6565b600955600a5550620004fa9650505050505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516200022d81620004e1565b919050565b600082601f8301126200024457600080fd5b604051608081016001600160401b03811182821017156200027557634e487b7160e01b600052604160045260246000fd5b6040528083608081018610156200028b57600080fd5b60005b6004811015620002b957620002a38262000220565b835260209283019291909101906001016200028e565b509195945050505050565b60008060008060008060008060006101e08a8c031215620002e457600080fd5b620002f08b8b62000232565b9850620003018b60808c0162000232565b97506101008a01516200031481620004e1565b6101208b01519097506200032881620004e1565b6101408b01519096506200033c81620004e1565b809550506101608a015193506101808a015192506101a08a015191506101c08a015190509295985092959850929598565b600181815b80851115620003ae5781600019048211156200039257620003926200049f565b80851615620003a057918102915b93841c939080029062000372565b509250929050565b6000620003c48383620003cb565b9392505050565b600082620003dc575060016200047b565b81620003eb575060006200047b565b81600181146200040457600281146200040f576200042f565b60019150506200047b565b60ff8411156200042357620004236200049f565b50506001821b6200047b565b5060208310610133831016604e8410600b841016171562000454575081810a6200047b565b6200046083836200036d565b80600019048211156200047757620004776200049f565b0290505b92915050565b60006000198214156200049857620004986200049f565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6001600160a01b0381168114620004f757600080fd5b50565b612b06806200050a6000396000f3fe608060405234801561001057600080fd5b50600436106102325760003560e01c806366234ffa116101305780639d38d064116100b8578063d88c69101161007c578063d88c691014610593578063d8aed145146105a6578063e260d747146105b9578063f05735db146105c2578063f2fde38b146105d557600080fd5b80639d38d0641461053e5780639e3aa5b114610547578063b13de2661461055a578063b2016bd41461056d578063c37077091461058057600080fd5b80637c3a00fd116100ff5780637c3a00fd146104eb57806389a30271146104f45780638ac2edc1146105075780638da5cb5b1461051a578063913198721461052b57600080fd5b806366234ffa1461048b5780636c016c0014610494578063715018a6146104d05780637a3c4c17146104d857600080fd5b8063415f1240116101be5780634ddde78d116101825780634ddde78d14610440578063587a03c2146104495780635f84f3021461045c5780636198e3391461046f57806362965d8e1461048257600080fd5b8063415f1240146103eb578063425378b4146103fe5780634437152a14610407578063484f13711461041a57806349b274ed1461042d57600080fd5b806324a6665e1161020557806324a6665e146102b05780632cb2f33414610372578063333daaa014610385578063357bcef014610398578063365c7504146103c857600080fd5b806301d73641146102375780630833a6c61461024c5780630ecbcdab1461027257806316f0115b14610285575b600080fd5b61024a61024536600461293a565b6105e8565b005b61025f61025a36600461293a565b610918565b6040519081526020015b60405180910390f35b61024a61028036600461296c565b610a1d565b600b54610298906001600160a01b031681565b6040516001600160a01b039091168152602001610269565b6103236102be36600461293a565b600c602090815260009182526040918290208054835160a08101855260018301546001600160a01b0390811682526002840154948201949094526003830154948101949094526004820154606085015260059091015460ff1615156080840152169082565b604080516001600160a01b0393841681528251909316602080850191909152820151838201528101516060808401919091528101516080808401919091520151151560a082015260c001610269565b61025f61038036600461293a565b61109b565b61024a61039336600461293a565b611101565b6103bb6103a6366004612830565b600e6020526000908152604090205460ff1681565b60405161026991906129f7565b6103db6103d636600461293a565b611469565b6040519015158152602001610269565b61024a6103f936600461293a565b6114ba565b61025f600a5481565b61024a610415366004612830565b6117bf565b61025f61042836600461293a565b6117e9565b6103db61043b36600461293a565b611852565b61025f60095481565b61024a61045736600461293a565b61187f565b61024a61046a36600461293a565b61188c565b61024a61047d36600461293a565b611899565b61025f60015481565b61025f60075481565b6104bb6104a236600461293a565b600d602052600090815260409020805460019091015482565b60408051928352602083019190915201610269565b61024a611994565b61025f6104e636600461293a565b6119a8565b61025f60065481565b600554610298906001600160a01b031681565b61024a61051536600461293a565b611ab3565b6000546001600160a01b0316610298565b600454610298906001600160a01b031681565b61025f60025481565b61025f61055536600461293a565b611fde565b61024a61056836600461293a565b612009565b600354610298906001600160a01b031681565b61024a61058e36600461293a565b612058565b61025f6105a136600461293a565b612065565b61024a6105b436600461296c565b612222565b61025f60085481565b61025f6105d036600461293a565b612510565b61024a6105e3366004612830565b612664565b6000818152600c60205260409020600401546106079061070890612a78565b421161061257600080fd5b6000818152600d602052604081209061062a83610918565b9050610635836126dd565b600b548254604051631b45a68d60e01b815260048101919091526000916001600160a01b031690631b45a68d90602401600060405180830381600087803b15801561067f57600080fd5b505af1158015610693573d6000803e3d6000fd5b5050505082600001548211156107fc5782546106af9083612a78565b600554600b549192506001600160a01b039081169163a9059cbb911660646106d885605a612a59565b6106e29190612a37565b86546106ee9190612a1f565b6040518363ffffffff1660e01b815260040161070b9291906129de565b602060405180830381600087803b15801561072557600080fd5b505af1158015610739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075d919061286a565b506005546001600160a01b031663a9059cbb33606461077d85600a612a59565b6107879190612a37565b6040518363ffffffff1660e01b81526004016107a49291906129de565b602060405180830381600087803b1580156107be57600080fd5b505af11580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f6919061286a565b50610886565b600554600b5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926108329291169086906004016129de565b602060405180830381600087803b15801561084c57600080fd5b505af1158015610860573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610884919061286a565b505b6000848152600c6020526040902054835485916001600160a01b0316907f7510f2e218f218a66429c54a712775c000c398117e38b240be7ef52310a51e829060646108d286605a612a59565b6108dc9190612a37565b60646108e987600a612a59565b6108f39190612a37565b604080519384526020840192909252908201526060015b60405180910390a350505050565b60048054604051633755269b60e01b815291820183905260009182916001600160a01b031690633755269b9060240160a06040518083038186803b15801561095f57600080fd5b505afa158015610973573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610997919061288c565b5050604051637632bffb60e01b815260048101879052919350506001600160a01b0383169150637632bffb9060240160206040518083038186803b1580156109de57600080fd5b505afa1580156109f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a169190612953565b9392505050565b600b60009054906101000a90046001600160a01b03166001600160a01b031663ae3050e16040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6b57600080fd5b505afa158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa3919061286a565b610ae45760405162461bcd60e51b815260206004820152600d60248201526c1c185d5cd95119511953195b99609a1b60448201526064015b60405180910390fd5b6000828152600d6020526040812090610afc84611fde565b60048054604051633755269b60e01b81529182018790529192506000916001600160a01b031690633755269b9060240160a06040518083038186803b158015610b4457600080fd5b505afa158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c919061288c565b5050505090506000600b60009054906101000a90046001600160a01b03166001600160a01b03166312b583496040518163ffffffff1660e01b815260040160206040518083038186803b158015610bd257600080fd5b505afa158015610be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0a9190612953565b9050600854851015610c5e5760405162461bcd60e51b815260206004820152601a60248201527f616d6f756e74206c657373206d696e426f72726f774c696d69740000000000006044820152606401610adb565b83548390610c6c9087612a1f565b1115610cc65760405162461bcd60e51b8152602060048201526024808201527f616d6f756e74202b20646174612e626f72726f776564206c657373206d61784c6044820152631a5b5a5d60e21b6064820152608401610adb565b6001826001811115610cda57610cda612aa5565b14610d175760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420737461746560981b6044820152606401610adb565b6000868152600c60205260409020546001600160a01b03163314610d755760405162461bcd60e51b81526020600482015260156024820152743cb7ba9030b932903737ba103a34329037bbb732b960591b6044820152606401610adb565b80851115610dd35760405162461bcd60e51b815260206004820152602560248201527f7468657265206973206e6f7420656e6f756768206d6f6e657920696e20746865604482015264081c1bdbdb60da1b6064820152608401610adb565b6000868152600c6020526040902060040154610df290610e1090612a78565b421115610e2c5760405162461bcd60e51b8152602060048201526008602482015267746f6f206c61746560c01b6044820152606401610adb565b6000868152600c602052604090206005015460ff1615610ea157610e4f86612510565b610e58876119a8565b11610e9c5760405162461bcd60e51b815260206004820152601460248201527374686520707269636520697320746f6f206c6f7760601b6044820152606401610adb565b610ef8565b610eaa86612510565b610eb3876119a8565b10610ef85760405162461bcd60e51b81526020600482015260156024820152740e8d0ca40e0e4d2c6ca40d2e640e8dede40d0d2ced605b1b6044820152606401610adb565b6000610f03876117e9565b9050604051806040016040528082876000015489610f219190612a1f565b610f2b9190612a1f565b8152426020918201526000898152600d82526040902082518155910151600190910155600b546001600160a01b0316632bc355ca610f698389612a1f565b6040518263ffffffff1660e01b8152600401610f8791815260200190565b600060405180830381600087803b158015610fa157600080fd5b505af1158015610fb5573d6000803e3d6000fd5b5050600b5460008a8152600c602052604090819020549051633419e74d60e21b81526001600160a01b03928316945063d0679d349350610ffd92909116908a906004016129de565b600060405180830381600087803b15801561101757600080fd5b505af115801561102b573d6000803e3d6000fd5b5050506000888152600c60209081526040918290206001015482518a81526001600160a01b03909116918101919091524281830152905189925033917f1fdbee5d1bd2901710e8945918b1a052ce67662661a2ccbf68420e4e430f8dab919081900360600190a350505050505050565b6000818152600c60205260408120600581015460ff16156110e0576110bf83612065565b6110c884612510565b11156110d757610a1683612510565b610a1683612065565b6110e983612065565b6110f284612510565b10156110d757610a1683612510565b61110a81611469565b6111465760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b6044820152606401610adb565b6000818152600d602052604081209061115e83610918565b9050611169836126dd565b600b548254604051631b45a68d60e01b81526001600160a01b0390921691631b45a68d9161119d9160040190815260200190565b600060405180830381600087803b1580156111b757600080fd5b505af11580156111cb573d6000803e3d6000fd5b5050600554600b54855460405163a9059cbb60e01b81526001600160a01b03938416955063a9059cbb945061120693909216916004016129de565b602060405180830381600087803b15801561122057600080fd5b505af1158015611234573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611258919061286a565b506005546000848152600c602052604090205483546001600160a01b039283169263a9059cbb92169060649061128f90600a612a59565b6112999190612a37565b85546112a59190612a1f565b6112af9085612a78565b6040518363ffffffff1660e01b81526004016112cc9291906129de565b602060405180830381600087803b1580156112e657600080fd5b505af11580156112fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131e919061286a565b5060055482546001600160a01b039091169063a9059cbb90339060649061134690600a612a59565b6113509190612a37565b6040518363ffffffff1660e01b815260040161136d9291906129de565b602060405180830381600087803b15801561138757600080fd5b505af115801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf919061286a565b506000838152600c6020526040902054825484916001600160a01b0316907ff28455920a5bcb3aeff7a6bbdd4fed497e6f159330fe161026128b5c381bdd909060649061140d90600a612a59565b6114179190612a37565b85546114239190612a1f565b61142d9085612a78565b8554606461143c82600a612a59565b6114469190612a37565b6040805193845260208401929092529082015260600160405180910390a3505050565b6000818152600c60205260408120600581015460ff161561149f5761148d83612510565b611496846119a8565b11159392505050565b6114a883612510565b6114b1846119a8565b10159392505050565b6114c381611852565b6114ff5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b6044820152606401610adb565b6000818152600d602052604081209061151783610918565b9050611522836126dd565b600b548254604051631b45a68d60e01b815260048101919091526000916001600160a01b031690631b45a68d90602401600060405180830381600087803b15801561156c57600080fd5b505af1158015611580573d6000803e3d6000fd5b5050505082600001548211156116e957825461159c9083612a78565b600554600b549192506001600160a01b039081169163a9059cbb911660646115c585605a612a59565b6115cf9190612a37565b86546115db9190612a1f565b6040518363ffffffff1660e01b81526004016115f89291906129de565b602060405180830381600087803b15801561161257600080fd5b505af1158015611626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164a919061286a565b506005546001600160a01b031663a9059cbb33606461166a85600a612a59565b6116749190612a37565b6040518363ffffffff1660e01b81526004016116919291906129de565b602060405180830381600087803b1580156116ab57600080fd5b505af11580156116bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e3919061286a565b50611773565b600554600b5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261171f9291169086906004016129de565b602060405180830381600087803b15801561173957600080fd5b505af115801561174d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611771919061286a565b505b6000848152600c6020526040902054835485916001600160a01b0316907f4e91025e01b2329df1ec1067d27aafec4d1c41f682ccd794dee04321e0b1e8dc9060646108d286605a612a59565b6117c7612750565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600d6020526040812060018101548290603c9061180b9042612a78565b6118159190612a37565b9050600754600654826118289190612a59565b835461183690606490612a37565b6118409190612a59565b61184a9190612a37565b949350505050565b6000818152600c60205260408120600581015460ff16156118765761148d83612065565b6114a883612065565b611887612750565b600755565b611894612750565b600655565b6000818152600d6020526040902054156118e95760405162461bcd60e51b81526020600482015260116024820152701bdc1d1a5bdb881a5cc8189b1bd8dad959607a1b6044820152606401610adb565b6003546000828152600c6020526040908190205490516323b872dd60e01b81523060048201526001600160a01b039182166024820152604481018490529116906323b872dd90606401600060405180830381600087803b15801561194c57600080fd5b505af1158015611960573d6000803e3d6000fd5b50506040518392503391507f6381d9813cabeb57471b5a7e05078e64845ccdb563146a6911d536f24ce960f190600090a350565b61199c612750565b6119a660006127aa565b565b6000818152600c6020908152604080832060018101548251635c4443cf60e11b81529251919385936001600160a01b039092169263b888879e926004808201939291829003018186803b1580156119fe57600080fd5b505afa158015611a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a36919061284d565b6001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611a6e57600080fd5b505afa158015611a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa6919061298e565b5091979650505050505050565b600b60009054906101000a90046001600160a01b03166001600160a01b031663ae3050e16040518163ffffffff1660e01b815260040160206040518083038186803b158015611b0157600080fd5b505afa158015611b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b39919061286a565b611b755760405162461bcd60e51b815260206004820152600d60248201526c1c185d5cd95119511953195b99609a1b6044820152606401610adb565b60048054604051633755269b60e01b8152918201839052600091829182916001600160a01b0390911690633755269b9060240160a06040518083038186803b158015611bc057600080fd5b505afa158015611bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf8919061288c565b9450505092509250610e108163ffffffff16611c149190612a78565b421115611c4e5760405162461bcd60e51b8152602060048201526008602482015267746f6f206c61746560c01b6044820152606401610adb565b6040516335b2346d60e21b81526004810185905260009081906001600160a01b0385169063d6c8d1b490602401604080518083038186803b158015611c9257600080fd5b505afa158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca9190612907565b90925090506001856001811115611ce357611ce3612aa5565b14611d235760405162461bcd60e51b815260206004820152601060248201526f6f7074696f6e2069732061637469766560801b6044820152606401610adb565b6003546040516331a9108f60e11b81526004810188905233916001600160a01b031690636352211e9060240160206040518083038186803b158015611d6757600080fd5b505afa158015611d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9f919061284d565b6001600160a01b031614611de55760405162461bcd60e51b815260206004820152600d60248201526c3cb7ba903737ba1037bbb732b960991b6044820152606401610adb565b6001600160a01b0384166000908152600e602052604081205460ff166002811115611e1257611e12612aa5565b1415611e595760405162461bcd60e51b81526020600482015260166024820152751cdd1c985d1959de481b9bdd081cdd5c1c1bdc9d195960521b6044820152606401610adb565b6003546040516323b872dd60e01b8152336004820152306024820152604481018890526001600160a01b03909116906323b872dd90606401600060405180830381600087803b158015611eab57600080fd5b505af1158015611ebf573d6000803e3d6000fd5b506000925060019150611ecf9050565b6001600160a01b0386166000908152600e602052604090205460ff166002811115611efc57611efc612aa5565b14611f08576000611f0b565b60015b604080518082018252338152815160a0810183526001600160a01b0398891681526001600160801b03968716602082810191909152959096168683015263ffffffff9096166060808701919091529115156080808701919091528487019586526000998a52600c855298819020955186549088166001600160a01b03199182161787559451805160018801805491909916961695909517909655918301516002850155509281015160038301559182015160048201559201516005909201805492151560ff199093169290921790915550565b6000600154600254611fef84610918565b611ff99190612a37565b6120039190612a59565b92915050565b612011612750565b611f408111156120535760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642076616c756560981b6044820152606401610adb565b600155565b612060612750565b600855565b6000818152600d60209081526040808320600c909252808320600480549251633755269b60e01b8152908101869052909184916001600160a01b0390911690633755269b9060240160a06040518083038186803b1580156120c557600080fd5b505afa1580156120d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fd919061288c565b505050915050600080826001600160a01b031663d6c8d1b4886040518263ffffffff1660e01b815260040161213491815260200190565b604080518083038186803b15801561214b57600080fd5b505afa15801561215f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121839190612907565b6005860154919350915060ff16156121e15760095485546001600160801b038416916121ae91612a59565b6121b89190612a37565b6121c3906078612a59565b6121d6906001600160801b038316612a1f565b979650505050505050565b60095485546001600160801b038416916121fa91612a59565b6122049190612a37565b61220f906078612a59565b6121d6906001600160801b038316612a78565b6000828152600d602052604090205461226f5760405162461bcd60e51b815260206004820152600f60248201526e1bdc1d1a5bdb881c995919595b5959608a1b6044820152606401610adb565b600061227a836117e9565b6000848152600d6020526040902054909150612297908290612a1f565b8211156122d85760405162461bcd60e51b815260206004820152600f60248201526e1d1bdbc81b5d58da08185b5bdd5b9d608a1b6044820152606401610adb565b6000838152600c60205260409020546001600160a01b031633146122fb57600080fd5b6000838152600d60205260408120548390612317908490612a1f565b6123219190612a78565b600b549091506001600160a01b0316631b45a68d61233f8486612a78565b6040518263ffffffff1660e01b815260040161235d91815260200190565b600060405180830381600087803b15801561237757600080fd5b505af115801561238b573d6000803e3d6000fd5b505060408051808201825284815242602080830191825260008a8152600d8252848120935184559151600190930192909255600554600c9092528290205491516323b872dd60e01b81526001600160a01b03928316600482015230602482015260448101889052911692506323b872dd9150606401602060405180830381600087803b15801561241a57600080fd5b505af115801561242e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612452919061286a565b50600554600b5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926124899291169087906004016129de565b602060405180830381600087803b1580156124a357600080fd5b505af11580156124b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124db919061286a565b50604051838152849033907f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d09060200161090a565b60048054604051633755269b60e01b815291820183905260009182916001600160a01b031690633755269b9060240160a06040518083038186803b15801561255757600080fd5b505afa15801561256b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258f919061288c565b50506040516335b2346d60e21b81526004810187905291935060009250506001600160a01b0383169063d6c8d1b490602401604080518083038186803b1580156125d857600080fd5b505afa1580156125ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126109190612907565b6000868152600c602052604090206005015490925060ff16159050612653576064600a5460646126409190612a1f565b611840906001600160801b038416612a59565b6064600a5460646126409190612a78565b61266c612750565b6001600160a01b0381166126d15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610adb565b6126da816127aa565b50565b6000818152600c6020526040908190206001810154915163b07f0a4160e01b81526004810184905290916001600160a01b03169063b07f0a4190602401600060405180830381600087803b15801561273457600080fd5b505af1158015612748573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146119a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610adb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160801b038116811461281157600080fd5b919050565b805169ffffffffffffffffffff8116811461281157600080fd5b60006020828403121561284257600080fd5b8135610a1681612abb565b60006020828403121561285f57600080fd5b8151610a1681612abb565b60006020828403121561287c57600080fd5b81518015158114610a1657600080fd5b600080600080600060a086880312156128a457600080fd5b8551600281106128b357600080fd5b60208701519095506128c481612abb565b93506128d2604087016127fa565b92506128e0606087016127fa565b9150608086015163ffffffff811681146128f957600080fd5b809150509295509295909350565b6000806040838503121561291a57600080fd5b612923836127fa565b9150612931602084016127fa565b90509250929050565b60006020828403121561294c57600080fd5b5035919050565b60006020828403121561296557600080fd5b5051919050565b6000806040838503121561297f57600080fd5b50508035926020909101359150565b600080600080600060a086880312156129a657600080fd5b6129af86612816565b94506020860151935060408601519250606086015191506129d260808701612816565b90509295509295909350565b6001600160a01b03929092168252602082015260400190565b6020810160038310612a1957634e487b7160e01b600052602160045260246000fd5b91905290565b60008219821115612a3257612a32612a8f565b500190565b600082612a5457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612a7357612a73612a8f565b500290565b600082821015612a8a57612a8a612a8f565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03811681146126da57600080fdfea26469706673582212200556ab8b8fc2039302625e5615c6a929509002d0fa9901ec439d51bc5df3ba1364736f6c63430008060033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102325760003560e01c806366234ffa116101305780639d38d064116100b8578063d88c69101161007c578063d88c691014610593578063d8aed145146105a6578063e260d747146105b9578063f05735db146105c2578063f2fde38b146105d557600080fd5b80639d38d0641461053e5780639e3aa5b114610547578063b13de2661461055a578063b2016bd41461056d578063c37077091461058057600080fd5b80637c3a00fd116100ff5780637c3a00fd146104eb57806389a30271146104f45780638ac2edc1146105075780638da5cb5b1461051a578063913198721461052b57600080fd5b806366234ffa1461048b5780636c016c0014610494578063715018a6146104d05780637a3c4c17146104d857600080fd5b8063415f1240116101be5780634ddde78d116101825780634ddde78d14610440578063587a03c2146104495780635f84f3021461045c5780636198e3391461046f57806362965d8e1461048257600080fd5b8063415f1240146103eb578063425378b4146103fe5780634437152a14610407578063484f13711461041a57806349b274ed1461042d57600080fd5b806324a6665e1161020557806324a6665e146102b05780632cb2f33414610372578063333daaa014610385578063357bcef014610398578063365c7504146103c857600080fd5b806301d73641146102375780630833a6c61461024c5780630ecbcdab1461027257806316f0115b14610285575b600080fd5b61024a61024536600461293a565b6105e8565b005b61025f61025a36600461293a565b610918565b6040519081526020015b60405180910390f35b61024a61028036600461296c565b610a1d565b600b54610298906001600160a01b031681565b6040516001600160a01b039091168152602001610269565b6103236102be36600461293a565b600c602090815260009182526040918290208054835160a08101855260018301546001600160a01b0390811682526002840154948201949094526003830154948101949094526004820154606085015260059091015460ff1615156080840152169082565b604080516001600160a01b0393841681528251909316602080850191909152820151838201528101516060808401919091528101516080808401919091520151151560a082015260c001610269565b61025f61038036600461293a565b61109b565b61024a61039336600461293a565b611101565b6103bb6103a6366004612830565b600e6020526000908152604090205460ff1681565b60405161026991906129f7565b6103db6103d636600461293a565b611469565b6040519015158152602001610269565b61024a6103f936600461293a565b6114ba565b61025f600a5481565b61024a610415366004612830565b6117bf565b61025f61042836600461293a565b6117e9565b6103db61043b36600461293a565b611852565b61025f60095481565b61024a61045736600461293a565b61187f565b61024a61046a36600461293a565b61188c565b61024a61047d36600461293a565b611899565b61025f60015481565b61025f60075481565b6104bb6104a236600461293a565b600d602052600090815260409020805460019091015482565b60408051928352602083019190915201610269565b61024a611994565b61025f6104e636600461293a565b6119a8565b61025f60065481565b600554610298906001600160a01b031681565b61024a61051536600461293a565b611ab3565b6000546001600160a01b0316610298565b600454610298906001600160a01b031681565b61025f60025481565b61025f61055536600461293a565b611fde565b61024a61056836600461293a565b612009565b600354610298906001600160a01b031681565b61024a61058e36600461293a565b612058565b61025f6105a136600461293a565b612065565b61024a6105b436600461296c565b612222565b61025f60085481565b61025f6105d036600461293a565b612510565b61024a6105e3366004612830565b612664565b6000818152600c60205260409020600401546106079061070890612a78565b421161061257600080fd5b6000818152600d602052604081209061062a83610918565b9050610635836126dd565b600b548254604051631b45a68d60e01b815260048101919091526000916001600160a01b031690631b45a68d90602401600060405180830381600087803b15801561067f57600080fd5b505af1158015610693573d6000803e3d6000fd5b5050505082600001548211156107fc5782546106af9083612a78565b600554600b549192506001600160a01b039081169163a9059cbb911660646106d885605a612a59565b6106e29190612a37565b86546106ee9190612a1f565b6040518363ffffffff1660e01b815260040161070b9291906129de565b602060405180830381600087803b15801561072557600080fd5b505af1158015610739573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061075d919061286a565b506005546001600160a01b031663a9059cbb33606461077d85600a612a59565b6107879190612a37565b6040518363ffffffff1660e01b81526004016107a49291906129de565b602060405180830381600087803b1580156107be57600080fd5b505af11580156107d2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107f6919061286a565b50610886565b600554600b5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926108329291169086906004016129de565b602060405180830381600087803b15801561084c57600080fd5b505af1158015610860573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610884919061286a565b505b6000848152600c6020526040902054835485916001600160a01b0316907f7510f2e218f218a66429c54a712775c000c398117e38b240be7ef52310a51e829060646108d286605a612a59565b6108dc9190612a37565b60646108e987600a612a59565b6108f39190612a37565b604080519384526020840192909252908201526060015b60405180910390a350505050565b60048054604051633755269b60e01b815291820183905260009182916001600160a01b031690633755269b9060240160a06040518083038186803b15801561095f57600080fd5b505afa158015610973573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610997919061288c565b5050604051637632bffb60e01b815260048101879052919350506001600160a01b0383169150637632bffb9060240160206040518083038186803b1580156109de57600080fd5b505afa1580156109f2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a169190612953565b9392505050565b600b60009054906101000a90046001600160a01b03166001600160a01b031663ae3050e16040518163ffffffff1660e01b815260040160206040518083038186803b158015610a6b57600080fd5b505afa158015610a7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa3919061286a565b610ae45760405162461bcd60e51b815260206004820152600d60248201526c1c185d5cd95119511953195b99609a1b60448201526064015b60405180910390fd5b6000828152600d6020526040812090610afc84611fde565b60048054604051633755269b60e01b81529182018790529192506000916001600160a01b031690633755269b9060240160a06040518083038186803b158015610b4457600080fd5b505afa158015610b58573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b7c919061288c565b5050505090506000600b60009054906101000a90046001600160a01b03166001600160a01b03166312b583496040518163ffffffff1660e01b815260040160206040518083038186803b158015610bd257600080fd5b505afa158015610be6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c0a9190612953565b9050600854851015610c5e5760405162461bcd60e51b815260206004820152601a60248201527f616d6f756e74206c657373206d696e426f72726f774c696d69740000000000006044820152606401610adb565b83548390610c6c9087612a1f565b1115610cc65760405162461bcd60e51b8152602060048201526024808201527f616d6f756e74202b20646174612e626f72726f776564206c657373206d61784c6044820152631a5b5a5d60e21b6064820152608401610adb565b6001826001811115610cda57610cda612aa5565b14610d175760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420737461746560981b6044820152606401610adb565b6000868152600c60205260409020546001600160a01b03163314610d755760405162461bcd60e51b81526020600482015260156024820152743cb7ba9030b932903737ba103a34329037bbb732b960591b6044820152606401610adb565b80851115610dd35760405162461bcd60e51b815260206004820152602560248201527f7468657265206973206e6f7420656e6f756768206d6f6e657920696e20746865604482015264081c1bdbdb60da1b6064820152608401610adb565b6000868152600c6020526040902060040154610df290610e1090612a78565b421115610e2c5760405162461bcd60e51b8152602060048201526008602482015267746f6f206c61746560c01b6044820152606401610adb565b6000868152600c602052604090206005015460ff1615610ea157610e4f86612510565b610e58876119a8565b11610e9c5760405162461bcd60e51b815260206004820152601460248201527374686520707269636520697320746f6f206c6f7760601b6044820152606401610adb565b610ef8565b610eaa86612510565b610eb3876119a8565b10610ef85760405162461bcd60e51b81526020600482015260156024820152740e8d0ca40e0e4d2c6ca40d2e640e8dede40d0d2ced605b1b6044820152606401610adb565b6000610f03876117e9565b9050604051806040016040528082876000015489610f219190612a1f565b610f2b9190612a1f565b8152426020918201526000898152600d82526040902082518155910151600190910155600b546001600160a01b0316632bc355ca610f698389612a1f565b6040518263ffffffff1660e01b8152600401610f8791815260200190565b600060405180830381600087803b158015610fa157600080fd5b505af1158015610fb5573d6000803e3d6000fd5b5050600b5460008a8152600c602052604090819020549051633419e74d60e21b81526001600160a01b03928316945063d0679d349350610ffd92909116908a906004016129de565b600060405180830381600087803b15801561101757600080fd5b505af115801561102b573d6000803e3d6000fd5b5050506000888152600c60209081526040918290206001015482518a81526001600160a01b03909116918101919091524281830152905189925033917f1fdbee5d1bd2901710e8945918b1a052ce67662661a2ccbf68420e4e430f8dab919081900360600190a350505050505050565b6000818152600c60205260408120600581015460ff16156110e0576110bf83612065565b6110c884612510565b11156110d757610a1683612510565b610a1683612065565b6110e983612065565b6110f284612510565b10156110d757610a1683612510565b61110a81611469565b6111465760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b6044820152606401610adb565b6000818152600d602052604081209061115e83610918565b9050611169836126dd565b600b548254604051631b45a68d60e01b81526001600160a01b0390921691631b45a68d9161119d9160040190815260200190565b600060405180830381600087803b1580156111b757600080fd5b505af11580156111cb573d6000803e3d6000fd5b5050600554600b54855460405163a9059cbb60e01b81526001600160a01b03938416955063a9059cbb945061120693909216916004016129de565b602060405180830381600087803b15801561122057600080fd5b505af1158015611234573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611258919061286a565b506005546000848152600c602052604090205483546001600160a01b039283169263a9059cbb92169060649061128f90600a612a59565b6112999190612a37565b85546112a59190612a1f565b6112af9085612a78565b6040518363ffffffff1660e01b81526004016112cc9291906129de565b602060405180830381600087803b1580156112e657600080fd5b505af11580156112fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061131e919061286a565b5060055482546001600160a01b039091169063a9059cbb90339060649061134690600a612a59565b6113509190612a37565b6040518363ffffffff1660e01b815260040161136d9291906129de565b602060405180830381600087803b15801561138757600080fd5b505af115801561139b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906113bf919061286a565b506000838152600c6020526040902054825484916001600160a01b0316907ff28455920a5bcb3aeff7a6bbdd4fed497e6f159330fe161026128b5c381bdd909060649061140d90600a612a59565b6114179190612a37565b85546114239190612a1f565b61142d9085612a78565b8554606461143c82600a612a59565b6114469190612a37565b6040805193845260208401929092529082015260600160405180910390a3505050565b6000818152600c60205260408120600581015460ff161561149f5761148d83612510565b611496846119a8565b11159392505050565b6114a883612510565b6114b1846119a8565b10159392505050565b6114c381611852565b6114ff5760405162461bcd60e51b815260206004820152600d60248201526c696e76616c696420707269636560981b6044820152606401610adb565b6000818152600d602052604081209061151783610918565b9050611522836126dd565b600b548254604051631b45a68d60e01b815260048101919091526000916001600160a01b031690631b45a68d90602401600060405180830381600087803b15801561156c57600080fd5b505af1158015611580573d6000803e3d6000fd5b5050505082600001548211156116e957825461159c9083612a78565b600554600b549192506001600160a01b039081169163a9059cbb911660646115c585605a612a59565b6115cf9190612a37565b86546115db9190612a1f565b6040518363ffffffff1660e01b81526004016115f89291906129de565b602060405180830381600087803b15801561161257600080fd5b505af1158015611626573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061164a919061286a565b506005546001600160a01b031663a9059cbb33606461166a85600a612a59565b6116749190612a37565b6040518363ffffffff1660e01b81526004016116919291906129de565b602060405180830381600087803b1580156116ab57600080fd5b505af11580156116bf573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116e3919061286a565b50611773565b600554600b5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb9261171f9291169086906004016129de565b602060405180830381600087803b15801561173957600080fd5b505af115801561174d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611771919061286a565b505b6000848152600c6020526040902054835485916001600160a01b0316907f4e91025e01b2329df1ec1067d27aafec4d1c41f682ccd794dee04321e0b1e8dc9060646108d286605a612a59565b6117c7612750565b600b80546001600160a01b0319166001600160a01b0392909216919091179055565b6000818152600d6020526040812060018101548290603c9061180b9042612a78565b6118159190612a37565b9050600754600654826118289190612a59565b835461183690606490612a37565b6118409190612a59565b61184a9190612a37565b949350505050565b6000818152600c60205260408120600581015460ff16156118765761148d83612065565b6114a883612065565b611887612750565b600755565b611894612750565b600655565b6000818152600d6020526040902054156118e95760405162461bcd60e51b81526020600482015260116024820152701bdc1d1a5bdb881a5cc8189b1bd8dad959607a1b6044820152606401610adb565b6003546000828152600c6020526040908190205490516323b872dd60e01b81523060048201526001600160a01b039182166024820152604481018490529116906323b872dd90606401600060405180830381600087803b15801561194c57600080fd5b505af1158015611960573d6000803e3d6000fd5b50506040518392503391507f6381d9813cabeb57471b5a7e05078e64845ccdb563146a6911d536f24ce960f190600090a350565b61199c612750565b6119a660006127aa565b565b6000818152600c6020908152604080832060018101548251635c4443cf60e11b81529251919385936001600160a01b039092169263b888879e926004808201939291829003018186803b1580156119fe57600080fd5b505afa158015611a12573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a36919061284d565b6001600160a01b031663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015611a6e57600080fd5b505afa158015611a82573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611aa6919061298e565b5091979650505050505050565b600b60009054906101000a90046001600160a01b03166001600160a01b031663ae3050e16040518163ffffffff1660e01b815260040160206040518083038186803b158015611b0157600080fd5b505afa158015611b15573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b39919061286a565b611b755760405162461bcd60e51b815260206004820152600d60248201526c1c185d5cd95119511953195b99609a1b6044820152606401610adb565b60048054604051633755269b60e01b8152918201839052600091829182916001600160a01b0390911690633755269b9060240160a06040518083038186803b158015611bc057600080fd5b505afa158015611bd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf8919061288c565b9450505092509250610e108163ffffffff16611c149190612a78565b421115611c4e5760405162461bcd60e51b8152602060048201526008602482015267746f6f206c61746560c01b6044820152606401610adb565b6040516335b2346d60e21b81526004810185905260009081906001600160a01b0385169063d6c8d1b490602401604080518083038186803b158015611c9257600080fd5b505afa158015611ca6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cca9190612907565b90925090506001856001811115611ce357611ce3612aa5565b14611d235760405162461bcd60e51b815260206004820152601060248201526f6f7074696f6e2069732061637469766560801b6044820152606401610adb565b6003546040516331a9108f60e11b81526004810188905233916001600160a01b031690636352211e9060240160206040518083038186803b158015611d6757600080fd5b505afa158015611d7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d9f919061284d565b6001600160a01b031614611de55760405162461bcd60e51b815260206004820152600d60248201526c3cb7ba903737ba1037bbb732b960991b6044820152606401610adb565b6001600160a01b0384166000908152600e602052604081205460ff166002811115611e1257611e12612aa5565b1415611e595760405162461bcd60e51b81526020600482015260166024820152751cdd1c985d1959de481b9bdd081cdd5c1c1bdc9d195960521b6044820152606401610adb565b6003546040516323b872dd60e01b8152336004820152306024820152604481018890526001600160a01b03909116906323b872dd90606401600060405180830381600087803b158015611eab57600080fd5b505af1158015611ebf573d6000803e3d6000fd5b506000925060019150611ecf9050565b6001600160a01b0386166000908152600e602052604090205460ff166002811115611efc57611efc612aa5565b14611f08576000611f0b565b60015b604080518082018252338152815160a0810183526001600160a01b0398891681526001600160801b03968716602082810191909152959096168683015263ffffffff9096166060808701919091529115156080808701919091528487019586526000998a52600c855298819020955186549088166001600160a01b03199182161787559451805160018801805491909916961695909517909655918301516002850155509281015160038301559182015160048201559201516005909201805492151560ff199093169290921790915550565b6000600154600254611fef84610918565b611ff99190612a37565b6120039190612a59565b92915050565b612011612750565b611f408111156120535760405162461bcd60e51b815260206004820152600d60248201526c696e76616c69642076616c756560981b6044820152606401610adb565b600155565b612060612750565b600855565b6000818152600d60209081526040808320600c909252808320600480549251633755269b60e01b8152908101869052909184916001600160a01b0390911690633755269b9060240160a06040518083038186803b1580156120c557600080fd5b505afa1580156120d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120fd919061288c565b505050915050600080826001600160a01b031663d6c8d1b4886040518263ffffffff1660e01b815260040161213491815260200190565b604080518083038186803b15801561214b57600080fd5b505afa15801561215f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121839190612907565b6005860154919350915060ff16156121e15760095485546001600160801b038416916121ae91612a59565b6121b89190612a37565b6121c3906078612a59565b6121d6906001600160801b038316612a1f565b979650505050505050565b60095485546001600160801b038416916121fa91612a59565b6122049190612a37565b61220f906078612a59565b6121d6906001600160801b038316612a78565b6000828152600d602052604090205461226f5760405162461bcd60e51b815260206004820152600f60248201526e1bdc1d1a5bdb881c995919595b5959608a1b6044820152606401610adb565b600061227a836117e9565b6000848152600d6020526040902054909150612297908290612a1f565b8211156122d85760405162461bcd60e51b815260206004820152600f60248201526e1d1bdbc81b5d58da08185b5bdd5b9d608a1b6044820152606401610adb565b6000838152600c60205260409020546001600160a01b031633146122fb57600080fd5b6000838152600d60205260408120548390612317908490612a1f565b6123219190612a78565b600b549091506001600160a01b0316631b45a68d61233f8486612a78565b6040518263ffffffff1660e01b815260040161235d91815260200190565b600060405180830381600087803b15801561237757600080fd5b505af115801561238b573d6000803e3d6000fd5b505060408051808201825284815242602080830191825260008a8152600d8252848120935184559151600190930192909255600554600c9092528290205491516323b872dd60e01b81526001600160a01b03928316600482015230602482015260448101889052911692506323b872dd9150606401602060405180830381600087803b15801561241a57600080fd5b505af115801561242e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612452919061286a565b50600554600b5460405163a9059cbb60e01b81526001600160a01b039283169263a9059cbb926124899291169087906004016129de565b602060405180830381600087803b1580156124a357600080fd5b505af11580156124b7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124db919061286a565b50604051838152849033907f77c6871227e5d2dec8dadd5354f78453203e22e669cd0ec4c19d9a8c5edb31d09060200161090a565b60048054604051633755269b60e01b815291820183905260009182916001600160a01b031690633755269b9060240160a06040518083038186803b15801561255757600080fd5b505afa15801561256b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061258f919061288c565b50506040516335b2346d60e21b81526004810187905291935060009250506001600160a01b0383169063d6c8d1b490602401604080518083038186803b1580156125d857600080fd5b505afa1580156125ec573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126109190612907565b6000868152600c602052604090206005015490925060ff16159050612653576064600a5460646126409190612a1f565b611840906001600160801b038416612a59565b6064600a5460646126409190612a78565b61266c612750565b6001600160a01b0381166126d15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610adb565b6126da816127aa565b50565b6000818152600c6020526040908190206001810154915163b07f0a4160e01b81526004810184905290916001600160a01b03169063b07f0a4190602401600060405180830381600087803b15801561273457600080fd5b505af1158015612748573d6000803e3d6000fd5b505050505050565b6000546001600160a01b031633146119a65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610adb565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160801b038116811461281157600080fd5b919050565b805169ffffffffffffffffffff8116811461281157600080fd5b60006020828403121561284257600080fd5b8135610a1681612abb565b60006020828403121561285f57600080fd5b8151610a1681612abb565b60006020828403121561287c57600080fd5b81518015158114610a1657600080fd5b600080600080600060a086880312156128a457600080fd5b8551600281106128b357600080fd5b60208701519095506128c481612abb565b93506128d2604087016127fa565b92506128e0606087016127fa565b9150608086015163ffffffff811681146128f957600080fd5b809150509295509295909350565b6000806040838503121561291a57600080fd5b612923836127fa565b9150612931602084016127fa565b90509250929050565b60006020828403121561294c57600080fd5b5035919050565b60006020828403121561296557600080fd5b5051919050565b6000806040838503121561297f57600080fd5b50508035926020909101359150565b600080600080600060a086880312156129a657600080fd5b6129af86612816565b94506020860151935060408601519250606086015191506129d260808701612816565b90509295509295909350565b6001600160a01b03929092168252602082015260400190565b6020810160038310612a1957634e487b7160e01b600052602160045260246000fd5b91905290565b60008219821115612a3257612a32612a8f565b500190565b600082612a5457634e487b7160e01b600052601260045260246000fd5b500490565b6000816000190483118215151615612a7357612a73612a8f565b500290565b600082821015612a8a57612a8a612a8f565b500390565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b6001600160a01b03811681146126da57600080fdfea26469706673582212200556ab8b8fc2039302625e5615c6a929509002d0fa9901ec439d51bc5df3ba1364736f6c63430008060033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 53,
        "contract": "contracts/DDL.sol:DDL",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2787,
        "contract": "contracts/DDL.sol:DDL",
        "label": "LTV",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 2792,
        "contract": "contracts/DDL.sol:DDL",
        "label": "LTV_DECIMALS",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2795,
        "contract": "contracts/DDL.sol:DDL",
        "label": "collateralToken",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IERC721)2147"
      },
      {
        "astId": 2798,
        "contract": "contracts/DDL.sol:DDL",
        "label": "operationalPool",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IHegicOperationalTreasury)4326"
      },
      {
        "astId": 2801,
        "contract": "contracts/DDL.sol:DDL",
        "label": "USDC",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(IERC20)822"
      },
      {
        "astId": 2804,
        "contract": "contracts/DDL.sol:DDL",
        "label": "interestRate",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2809,
        "contract": "contracts/DDL.sol:DDL",
        "label": "INTEREST_RATE_DECIMALS",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2811,
        "contract": "contracts/DDL.sol:DDL",
        "label": "minBorrowLimit",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2813,
        "contract": "contracts/DDL.sol:DDL",
        "label": "COLLATERAL_DECIMALS",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2815,
        "contract": "contracts/DDL.sol:DDL",
        "label": "PriorLiqPriceCoef",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2818,
        "contract": "contracts/DDL.sol:DDL",
        "label": "pool",
        "offset": 0,
        "slot": "11",
        "type": "t_contract(IPoolDDL)4387"
      },
      {
        "astId": 2849,
        "contract": "contracts/DDL.sol:DDL",
        "label": "collateralInfo",
        "offset": 0,
        "slot": "12",
        "type": "t_mapping(t_uint256,t_struct(CollateralInfo)2840_storage)"
      },
      {
        "astId": 2854,
        "contract": "contracts/DDL.sol:DDL",
        "label": "borrowedByOption",
        "offset": 0,
        "slot": "13",
        "type": "t_mapping(t_uint256,t_struct(BorrowedByOption)2823_storage)"
      },
      {
        "astId": 2859,
        "contract": "contracts/DDL.sol:DDL",
        "label": "strategyType",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_enum(HegicStrategyType)2844)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)822": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IERC721)2147": {
        "encoding": "inplace",
        "label": "contract IERC721",
        "numberOfBytes": "20"
      },
      "t_contract(IHegicOperationalTreasury)4326": {
        "encoding": "inplace",
        "label": "contract IHegicOperationalTreasury",
        "numberOfBytes": "20"
      },
      "t_contract(IPoolDDL)4387": {
        "encoding": "inplace",
        "label": "contract IPoolDDL",
        "numberOfBytes": "20"
      },
      "t_enum(HegicStrategyType)2844": {
        "encoding": "inplace",
        "label": "enum DDL.HegicStrategyType",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_enum(HegicStrategyType)2844)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => enum DDL.HegicStrategyType)",
        "numberOfBytes": "32",
        "value": "t_enum(HegicStrategyType)2844"
      },
      "t_mapping(t_uint256,t_struct(BorrowedByOption)2823_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DDL.BorrowedByOption)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowedByOption)2823_storage"
      },
      "t_mapping(t_uint256,t_struct(CollateralInfo)2840_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct DDL.CollateralInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(CollateralInfo)2840_storage"
      },
      "t_struct(BorrowedByOption)2823_storage": {
        "encoding": "inplace",
        "label": "struct DDL.BorrowedByOption",
        "members": [
          {
            "astId": 2820,
            "contract": "contracts/DDL.sol:DDL",
            "label": "borrowed",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2822,
            "contract": "contracts/DDL.sol:DDL",
            "label": "newBorrowTimestamp",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(CollateralInfo)2840_storage": {
        "encoding": "inplace",
        "label": "struct DDL.CollateralInfo",
        "members": [
          {
            "astId": 2836,
            "contract": "contracts/DDL.sol:DDL",
            "label": "owner",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2839,
            "contract": "contracts/DDL.sol:DDL",
            "label": "strategy",
            "offset": 0,
            "slot": "1",
            "type": "t_struct(optionInfo)2834_storage"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_struct(optionInfo)2834_storage": {
        "encoding": "inplace",
        "label": "struct DDL.optionInfo",
        "members": [
          {
            "astId": 2825,
            "contract": "contracts/DDL.sol:DDL",
            "label": "strategyAddress",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2827,
            "contract": "contracts/DDL.sol:DDL",
            "label": "amount",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2829,
            "contract": "contracts/DDL.sol:DDL",
            "label": "strike",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2831,
            "contract": "contracts/DDL.sol:DDL",
            "label": "expiration",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2833,
            "contract": "contracts/DDL.sol:DDL",
            "label": "isLong",
            "offset": 0,
            "slot": "4",
            "type": "t_bool"
          }
        ],
        "numberOfBytes": "160"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}