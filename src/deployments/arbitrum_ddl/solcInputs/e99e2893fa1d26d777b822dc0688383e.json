{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/access/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/ERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC721.sol\";\nimport \"./IERC721Receiver.sol\";\nimport \"./extensions/IERC721Metadata.sol\";\nimport \"../../utils/Address.sol\";\nimport \"../../utils/Context.sol\";\nimport \"../../utils/Strings.sol\";\nimport \"../../utils/introspection/ERC165.sol\";\n\n/**\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\n * {ERC721Enumerable}.\n */\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\n    using Address for address;\n    using Strings for uint256;\n\n    // Token name\n    string private _name;\n\n    // Token symbol\n    string private _symbol;\n\n    // Mapping from token ID to owner address\n    mapping(uint256 => address) private _owners;\n\n    // Mapping owner address to token count\n    mapping(address => uint256) private _balances;\n\n    // Mapping from token ID to approved address\n    mapping(uint256 => address) private _tokenApprovals;\n\n    // Mapping from owner to operator approvals\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\n\n    /**\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\n        return\n            interfaceId == type(IERC721).interfaceId ||\n            interfaceId == type(IERC721Metadata).interfaceId ||\n            super.supportsInterface(interfaceId);\n    }\n\n    /**\n     * @dev See {IERC721-balanceOf}.\n     */\n    function balanceOf(address owner) public view virtual override returns (uint256) {\n        require(owner != address(0), \"ERC721: address zero is not a valid owner\");\n        return _balances[owner];\n    }\n\n    /**\n     * @dev See {IERC721-ownerOf}.\n     */\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\n        address owner = _ownerOf(tokenId);\n        require(owner != address(0), \"ERC721: invalid token ID\");\n        return owner;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-name}.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-symbol}.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev See {IERC721Metadata-tokenURI}.\n     */\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\n        _requireMinted(tokenId);\n\n        string memory baseURI = _baseURI();\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \"\";\n    }\n\n    /**\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\n     * by default, can be overridden in child contracts.\n     */\n    function _baseURI() internal view virtual returns (string memory) {\n        return \"\";\n    }\n\n    /**\n     * @dev See {IERC721-approve}.\n     */\n    function approve(address to, uint256 tokenId) public virtual override {\n        address owner = ERC721.ownerOf(tokenId);\n        require(to != owner, \"ERC721: approval to current owner\");\n\n        require(\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\n            \"ERC721: approve caller is not token owner or approved for all\"\n        );\n\n        _approve(to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-getApproved}.\n     */\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\n        _requireMinted(tokenId);\n\n        return _tokenApprovals[tokenId];\n    }\n\n    /**\n     * @dev See {IERC721-setApprovalForAll}.\n     */\n    function setApprovalForAll(address operator, bool approved) public virtual override {\n        _setApprovalForAll(_msgSender(), operator, approved);\n    }\n\n    /**\n     * @dev See {IERC721-isApprovedForAll}.\n     */\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\n        return _operatorApprovals[owner][operator];\n    }\n\n    /**\n     * @dev See {IERC721-transferFrom}.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        //solhint-disable-next-line max-line-length\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n\n        _transfer(from, to, tokenId);\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) public virtual override {\n        safeTransferFrom(from, to, tokenId, \"\");\n    }\n\n    /**\n     * @dev See {IERC721-safeTransferFrom}.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) public virtual override {\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \"ERC721: caller is not token owner or approved\");\n        _safeTransfer(from, to, tokenId, data);\n    }\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\n     *\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeTransfer(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _transfer(from, to, tokenId);\n        require(_checkOnERC721Received(from, to, tokenId, data), \"ERC721: transfer to non ERC721Receiver implementer\");\n    }\n\n    /**\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\n     */\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\n\n    /**\n     * @dev Returns whether `tokenId` exists.\n     *\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\n     *\n     * Tokens start existing when they are minted (`_mint`),\n     * and stop existing when they are burned (`_burn`).\n     */\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\n        return _ownerOf(tokenId) != address(0);\n    }\n\n    /**\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\n        address owner = ERC721.ownerOf(tokenId);\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\n    }\n\n    /**\n     * @dev Safely mints `tokenId` and transfers it to `to`.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _safeMint(address to, uint256 tokenId) internal virtual {\n        _safeMint(to, tokenId, \"\");\n    }\n\n    /**\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\n     */\n    function _safeMint(\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) internal virtual {\n        _mint(to, tokenId);\n        require(\n            _checkOnERC721Received(address(0), to, tokenId, data),\n            \"ERC721: transfer to non ERC721Receiver implementer\"\n        );\n    }\n\n    /**\n     * @dev Mints `tokenId` and transfers it to `to`.\n     *\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\n     *\n     * Requirements:\n     *\n     * - `tokenId` must not exist.\n     * - `to` cannot be the zero address.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _mint(address to, uint256 tokenId) internal virtual {\n        require(to != address(0), \"ERC721: mint to the zero address\");\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\n\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\n        require(!_exists(tokenId), \"ERC721: token already minted\");\n\n        unchecked {\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\n            // Given that tokens are minted one by one, it is impossible in practice that\n            // this ever happens. Might change if we allow batch minting.\n            // The ERC fails to describe this case.\n            _balances[to] += 1;\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(address(0), to, tokenId);\n\n        _afterTokenTransfer(address(0), to, tokenId, 1);\n    }\n\n    /**\n     * @dev Destroys `tokenId`.\n     * The approval is cleared when the token is burned.\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _burn(uint256 tokenId) internal virtual {\n        address owner = ERC721.ownerOf(tokenId);\n\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\n\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\n        owner = ERC721.ownerOf(tokenId);\n\n        // Clear approvals\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // Cannot overflow, as that would require more tokens to be burned/transferred\n            // out than the owner initially received through minting and transferring in.\n            _balances[owner] -= 1;\n        }\n        delete _owners[tokenId];\n\n        emit Transfer(owner, address(0), tokenId);\n\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\n    }\n\n    /**\n     * @dev Transfers `tokenId` from `from` to `to`.\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     *\n     * Emits a {Transfer} event.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 tokenId\n    ) internal virtual {\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n        require(to != address(0), \"ERC721: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, tokenId, 1);\n\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\n        require(ERC721.ownerOf(tokenId) == from, \"ERC721: transfer from incorrect owner\");\n\n        // Clear approvals from the previous owner\n        delete _tokenApprovals[tokenId];\n\n        unchecked {\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\n            // `from`'s balance is the number of token held, which is at least one before the current\n            // transfer.\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\n            // all 2**256 token ids to be minted, which in practice is impossible.\n            _balances[from] -= 1;\n            _balances[to] += 1;\n        }\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        _afterTokenTransfer(from, to, tokenId, 1);\n    }\n\n    /**\n     * @dev Approve `to` to operate on `tokenId`\n     *\n     * Emits an {Approval} event.\n     */\n    function _approve(address to, uint256 tokenId) internal virtual {\n        _tokenApprovals[tokenId] = to;\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\n    }\n\n    /**\n     * @dev Approve `operator` to operate on all of `owner` tokens\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function _setApprovalForAll(\n        address owner,\n        address operator,\n        bool approved\n    ) internal virtual {\n        require(owner != operator, \"ERC721: approve to caller\");\n        _operatorApprovals[owner][operator] = approved;\n        emit ApprovalForAll(owner, operator, approved);\n    }\n\n    /**\n     * @dev Reverts if the `tokenId` has not been minted yet.\n     */\n    function _requireMinted(uint256 tokenId) internal view virtual {\n        require(_exists(tokenId), \"ERC721: invalid token ID\");\n    }\n\n    /**\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\n     * The call is not executed if the target address is not a contract.\n     *\n     * @param from address representing the previous owner of the given token ID\n     * @param to target address that will receive the tokens\n     * @param tokenId uint256 ID of the token to be transferred\n     * @param data bytes optional data to send along with the call\n     * @return bool whether the call correctly returned the expected magic value\n     */\n    function _checkOnERC721Received(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes memory data\n    ) private returns (bool) {\n        if (to.isContract()) {\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\n                return retval == IERC721Receiver.onERC721Received.selector;\n            } catch (bytes memory reason) {\n                if (reason.length == 0) {\n                    revert(\"ERC721: transfer to non ERC721Receiver implementer\");\n                } else {\n                    /// @solidity memory-safe-assembly\n                    assembly {\n                        revert(add(32, reason), mload(reason))\n                    }\n                }\n            }\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\n     * - When `from` is zero, the tokens will be minted for `to`.\n     * - When `to` is zero, ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256, /* firstTokenId */\n        uint256 batchSize\n    ) internal virtual {\n        if (batchSize > 1) {\n            if (from != address(0)) {\n                _balances[from] -= batchSize;\n            }\n            if (to != address(0)) {\n                _balances[to] += batchSize;\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\n     *\n     * Calling conditions:\n     *\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\n     * - When `from` is zero, the tokens were minted for `to`.\n     * - When `to` is zero, ``from``'s tokens were burned.\n     * - `from` and `to` are never both zero.\n     * - `batchSize` is non-zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 firstTokenId,\n        uint256 batchSize\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC721.sol\";\n\n/**\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\n * @dev See https://eips.ethereum.org/EIPS/eip-721\n */\ninterface IERC721Metadata is IERC721 {\n    /**\n     * @dev Returns the token collection name.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the token collection symbol.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\n     */\n    function tokenURI(uint256 tokenId) external view returns (string memory);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../../utils/introspection/IERC165.sol\";\n\n/**\n * @dev Required interface of an ERC721 compliant contract.\n */\ninterface IERC721 is IERC165 {\n    /**\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\n     */\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\n\n    /**\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\n     */\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\n\n    /**\n     * @dev Returns the number of tokens in ``owner``'s account.\n     */\n    function balanceOf(address owner) external view returns (uint256 balance);\n\n    /**\n     * @dev Returns the owner of the `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function ownerOf(uint256 tokenId) external view returns (address owner);\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId,\n        bytes calldata data\n    ) external;\n\n    /**\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must exist and be owned by `from`.\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\n     *\n     * Emits a {Transfer} event.\n     */\n    function safeTransferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Transfers `tokenId` token from `from` to `to`.\n     *\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `tokenId` token must be owned by `from`.\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 tokenId\n    ) external;\n\n    /**\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\n     * The approval is cleared when the token is transferred.\n     *\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\n     *\n     * Requirements:\n     *\n     * - The caller must own the token or be an approved operator.\n     * - `tokenId` must exist.\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address to, uint256 tokenId) external;\n\n    /**\n     * @dev Approve or remove `operator` as an operator for the caller.\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\n     *\n     * Requirements:\n     *\n     * - The `operator` cannot be the caller.\n     *\n     * Emits an {ApprovalForAll} event.\n     */\n    function setApprovalForAll(address operator, bool _approved) external;\n\n    /**\n     * @dev Returns the account approved for `tokenId` token.\n     *\n     * Requirements:\n     *\n     * - `tokenId` must exist.\n     */\n    function getApproved(uint256 tokenId) external view returns (address operator);\n\n    /**\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\n     *\n     * See {setApprovalForAll}\n     */\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @title ERC721 token receiver interface\n * @dev Interface for any contract that wants to support safeTransfers\n * from ERC721 asset contracts.\n */\ninterface IERC721Receiver {\n    /**\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\n     * by `operator` from `from`, this function is called.\n     *\n     * It must return its Solidity selector to confirm the token transfer.\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\n     *\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\n     */\n    function onERC721Received(\n        address operator,\n        address from,\n        uint256 tokenId,\n        bytes calldata data\n    ) external returns (bytes4);\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/ERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC165.sol\";\n\n/**\n * @dev Implementation of the {IERC165} interface.\n *\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\n * for the additional interface id that will be supported. For example:\n *\n * ```solidity\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\n * }\n * ```\n *\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\n */\nabstract contract ERC165 is IERC165 {\n    /**\n     * @dev See {IERC165-supportsInterface}.\n     */\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\n        return interfaceId == type(IERC165).interfaceId;\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/introspection/IERC165.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC165 standard, as defined in the\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\n *\n * Implementers can declare support of contract interfaces, which can then be\n * queried by others ({ERC165Checker}).\n *\n * For an implementation, see {ERC165}.\n */\ninterface IERC165 {\n    /**\n     * @dev Returns true if this contract implements the interface defined by\n     * `interfaceId`. See the corresponding\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\n     * to learn more about how these ids are created.\n     *\n     * This function call must use less than 30 000 gas.\n     */\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/utils/math/Math.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Standard math utilities missing in the Solidity language.\n */\nlibrary Math {\n    enum Rounding {\n        Down, // Toward negative infinity\n        Up, // Toward infinity\n        Zero // Toward zero\n    }\n\n    /**\n     * @dev Returns the largest of two numbers.\n     */\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a > b ? a : b;\n    }\n\n    /**\n     * @dev Returns the smallest of two numbers.\n     */\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\n\n    /**\n     * @dev Returns the average of two numbers. The result is rounded towards\n     * zero.\n     */\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b) / 2 can overflow.\n        return (a & b) + (a ^ b) / 2;\n    }\n\n    /**\n     * @dev Returns the ceiling of the division of two numbers.\n     *\n     * This differs from standard division with `/` in that it rounds up instead\n     * of rounding down.\n     */\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\n        // (a + b - 1) / b can overflow on addition, so we distribute.\n        return a == 0 ? 0 : (a - 1) / b + 1;\n    }\n\n    /**\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\n     * with further edits by Uniswap Labs also under MIT license.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator\n    ) internal pure returns (uint256 result) {\n        unchecked {\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\n            // variables such that product = prod1 * 2^256 + prod0.\n            uint256 prod0; // Least significant 256 bits of the product\n            uint256 prod1; // Most significant 256 bits of the product\n            assembly {\n                let mm := mulmod(x, y, not(0))\n                prod0 := mul(x, y)\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\n            }\n\n            // Handle non-overflow cases, 256 by 256 division.\n            if (prod1 == 0) {\n                return prod0 / denominator;\n            }\n\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\n            require(denominator > prod1);\n\n            ///////////////////////////////////////////////\n            // 512 by 256 division.\n            ///////////////////////////////////////////////\n\n            // Make division exact by subtracting the remainder from [prod1 prod0].\n            uint256 remainder;\n            assembly {\n                // Compute remainder using mulmod.\n                remainder := mulmod(x, y, denominator)\n\n                // Subtract 256 bit number from 512 bit number.\n                prod1 := sub(prod1, gt(remainder, prod0))\n                prod0 := sub(prod0, remainder)\n            }\n\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\n            // See https://cs.stackexchange.com/q/138556/92363.\n\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\n            uint256 twos = denominator & (~denominator + 1);\n            assembly {\n                // Divide denominator by twos.\n                denominator := div(denominator, twos)\n\n                // Divide [prod1 prod0] by twos.\n                prod0 := div(prod0, twos)\n\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\n                twos := add(div(sub(0, twos), twos), 1)\n            }\n\n            // Shift in bits from prod1 into prod0.\n            prod0 |= prod1 * twos;\n\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\n            // four bits. That is, denominator * inv = 1 mod 2^4.\n            uint256 inverse = (3 * denominator) ^ 2;\n\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\n            // in modular arithmetic, doubling the correct bits in each step.\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\n\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\n            // is no longer required.\n            result = prod0 * inverse;\n            return result;\n        }\n    }\n\n    /**\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\n     */\n    function mulDiv(\n        uint256 x,\n        uint256 y,\n        uint256 denominator,\n        Rounding rounding\n    ) internal pure returns (uint256) {\n        uint256 result = mulDiv(x, y, denominator);\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\n            result += 1;\n        }\n        return result;\n    }\n\n    /**\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\n     *\n     * Inspired by Henry S. Warren, Jr.'s \"Hacker's Delight\" (Chapter 11).\n     */\n    function sqrt(uint256 a) internal pure returns (uint256) {\n        if (a == 0) {\n            return 0;\n        }\n\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\n        //\n        // We know that the \"msb\" (most significant bit) of our target number `a` is a power of 2 such that we have\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\n        //\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\n        // → `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\n        // → `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\n        //\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\n        uint256 result = 1 << (log2(a) >> 1);\n\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\n        // into the expected uint128 result.\n        unchecked {\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            result = (result + a / result) >> 1;\n            return min(result, a / result);\n        }\n    }\n\n    /**\n     * @notice Calculates sqrt(a), following the selected rounding direction.\n     */\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = sqrt(a);\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 2, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 128;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 64;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 32;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 16;\n            }\n            if (value >> 8 > 0) {\n                value >>= 8;\n                result += 8;\n            }\n            if (value >> 4 > 0) {\n                value >>= 4;\n                result += 4;\n            }\n            if (value >> 2 > 0) {\n                value >>= 2;\n                result += 2;\n            }\n            if (value >> 1 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log2(value);\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 10, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >= 10**64) {\n                value /= 10**64;\n                result += 64;\n            }\n            if (value >= 10**32) {\n                value /= 10**32;\n                result += 32;\n            }\n            if (value >= 10**16) {\n                value /= 10**16;\n                result += 16;\n            }\n            if (value >= 10**8) {\n                value /= 10**8;\n                result += 8;\n            }\n            if (value >= 10**4) {\n                value /= 10**4;\n                result += 4;\n            }\n            if (value >= 10**2) {\n                value /= 10**2;\n                result += 2;\n            }\n            if (value >= 10**1) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log10(value);\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\n        }\n    }\n\n    /**\n     * @dev Return the log in base 256, rounded down, of a positive value.\n     * Returns 0 if given 0.\n     *\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\n     */\n    function log256(uint256 value) internal pure returns (uint256) {\n        uint256 result = 0;\n        unchecked {\n            if (value >> 128 > 0) {\n                value >>= 128;\n                result += 16;\n            }\n            if (value >> 64 > 0) {\n                value >>= 64;\n                result += 8;\n            }\n            if (value >> 32 > 0) {\n                value >>= 32;\n                result += 4;\n            }\n            if (value >> 16 > 0) {\n                value >>= 16;\n                result += 2;\n            }\n            if (value >> 8 > 0) {\n                result += 1;\n            }\n        }\n        return result;\n    }\n\n    /**\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\n     * Returns 0 if given 0.\n     */\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\n        unchecked {\n            uint256 result = log256(value);\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Strings.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./math/Math.sol\";\n\n/**\n * @dev String operations.\n */\nlibrary Strings {\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\n     */\n    function toString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            uint256 length = Math.log10(value) + 1;\n            string memory buffer = new string(length);\n            uint256 ptr;\n            /// @solidity memory-safe-assembly\n            assembly {\n                ptr := add(buffer, add(32, length))\n            }\n            while (true) {\n                ptr--;\n                /// @solidity memory-safe-assembly\n                assembly {\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\n                }\n                value /= 10;\n                if (value == 0) break;\n            }\n            return buffer;\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\n     */\n    function toHexString(uint256 value) internal pure returns (string memory) {\n        unchecked {\n            return toHexString(value, Math.log256(value) + 1);\n        }\n    }\n\n    /**\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\n     */\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\n        bytes memory buffer = new bytes(2 * length + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"Strings: hex length insufficient\");\n        return string(buffer);\n    }\n\n    /**\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\n     */\n    function toHexString(address addr) internal pure returns (string memory) {\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\n    }\n}\n"
    },
    "contracts/DDL_GMX.sol": {
      "content": "/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * DeDeLend\n * Copyright (C) 2022 DeDeLend\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\npragma solidity 0.8.6||0.7.0;\n\nimport \"./DDL.sol\";\nimport \"./interfaces/IAccountManager.sol\";\nimport \"./interfaces/IVault.sol\";\nimport \"./interfaces/ITimelock.sol\";\nimport \"./interfaces/IPositionRouter.sol\";\nimport \"./interfaces/IOrderBook.sol\";\nimport \"./Doppelganger.sol\";\n\ncontract DDL_GMX is DDL {\n    IAccountManager public accountManager;\n    IVault public vault;\n    IPositionRouter public positionRouter;\n    int256 public closeSlippage = 10;\n    uint256 internal constant GMX_DECIMALS = 1e30;\n\n    struct PositionInfo {\n        address indexToken;\n        uint256 amount;\n        uint256 openPrice;\n        bool isLong;\n    }\n\n    struct LiquidatePositionInfo {\n        uint256 id;\n        address liquidator;\n        uint256 amountReturn;\n        uint256 profit;\n        bool isBorderPrice;\n    }\n\n    mapping(uint256 => PositionInfo) public positionInfo;\n    mapping(bytes32 => LiquidatePositionInfo) private liquidatePositionInfo;\n    mapping(address => uint256) public borderPriceCoef;\n\n    constructor(\n        IPositionRouter _positionRouter,\n        IAccountManager _accountManager,\n        IVault _vault,\n        IERC721 _collateralToken,\n        IERC20 _USDC,\n        uint256 _minBorrowLimit,\n        uint256 _ltv,\n        uint256 _COLLATERAL_DECIMALS,\n        address[4] memory _ArrIndexPrice,\n        uint256[4] memory _ArrBorderPriceCoef\n    )\n        DDL(\n            _collateralToken,\n            _USDC,\n            _minBorrowLimit,\n            _ltv,\n            _COLLATERAL_DECIMALS\n        )\n    {\n        positionRouter = _positionRouter;\n        accountManager = _accountManager;\n        vault = _vault;\n        for (uint256 i = 0; i < 4; i++) {\n            borderPriceCoef[_ArrIndexPrice[i]] = _ArrBorderPriceCoef[i];\n        }\n    }\n\n    function setBorderPriceCoef(uint256 value, address indexToken) external onlyOwner {\n        borderPriceCoef[indexToken] = value;\n    }\n\n    /**\n     * @notice takes ERC-721 (collateral) from the user and locking in DDL_GMX\n     * @param id collateral ID\n     * @param user user's address\n     **/\n    function _lockCollateral(uint256 id, address user) internal override {\n        (IAccountManager.Symbols symbol, , bool isLong, , ) = accountManager\n            .keyData(id);\n        address indexToken = accountManager.indexTokenBySymbol(symbol);\n        (uint256 size, , uint256 averagePrice, , , , , ) = accountManager\n            .getPosition(id);\n        collateralToken.transferFrom(msg.sender, address(this), id);\n        positionInfo[id] = PositionInfo(indexToken, size, averagePrice, isLong);\n    }\n\n    /**\n     * @notice checks the ability to borrow USDC by collateral ID\n     * @param id collateral ID\n     **/\n    function _isAvaialbleToBorrow(uint256 id) internal override {\n        (bool isProfit, ) = accountManager.getPositionDelta(id);\n        require(isProfit, \"no profit\");\n    }\n\n    function _emitBorrow(\n        address user,\n        uint256 id,\n        uint256 amount,\n        uint256 timestamp\n    ) internal override {\n        emit Borrow(\n            user,\n            id,\n            amount,\n            positionInfo[id].indexToken,\n            block.timestamp\n        );\n    }\n\n    /**\n     * @notice calculates the intrinsic value of the collateral\n     * @param id collateral ID\n     **/\n    function intrinsicValueOf(uint256 id)\n        public\n        view\n        override\n        returns (uint256 delta)\n    {\n        (bool isProfit, uint256 profit) = accountManager.getPositionDelta(id);\n        profit = profit / (GMX_DECIMALS / 1e6);\n        return (isProfit ? profit : 0);\n    }\n\n    /**\n     * @notice closes position on GMX\n     * @param id collateral id\n     **/\n    function _liquidateCollateral(uint256 id, bool isBorderPrice) internal {\n        (, address doppelgangerContract, bool isLong, , ) = accountManager\n            .keyData(id);\n        PositionInfo memory data = positionInfo[id];\n        (uint256 closePrice, uint256 size) = liquidateClosePrice(id);\n        (address[] memory path, uint256 closeValue) = _preparationData(id);\n        Doppelganger(payable(doppelgangerContract)).createDecreasePosition{\n            value: msg.value\n        }(\n            address(this),\n            path,\n            data.indexToken,\n            closeValue,\n            size,\n            data.isLong,\n            closePrice,\n            0,\n            positionRouter.minExecutionFee(),\n            false,\n            address(this)\n        );\n        uint256 amountReturn = decreasePositionReturnValue(\n            doppelgangerContract,\n            path[0],\n            data.indexToken,\n            closeValue,\n            size,\n            isLong\n        );\n        if (amountReturn > 0) {\n            if (path.length > 1) {\n                amountReturn = _swap(path[0], path[1], amountReturn);\n            }\n        }\n        informationFromCallback(\n            doppelgangerContract,\n            id,\n            isBorderPrice,\n            amountReturn\n        );\n    }\n\n    function _swap(\n        address _tokenIn,\n        address _tokenOut,\n        uint256 amountIn\n    ) internal returns (uint256) {\n        uint256 priceIn = vault.getMinPrice(_tokenIn);\n        uint256 priceOut = vault.getMaxPrice(_tokenOut);\n        uint256 amountOut = (amountIn * priceIn) / priceOut;\n        amountOut = vault.adjustForDecimals(amountOut, _tokenIn, _tokenOut);\n\n        uint256 usdgAmount = (amountIn * priceIn) / GMX_DECIMALS;\n        usdgAmount = vault.adjustForDecimals(\n            usdgAmount,\n            _tokenIn,\n            vault.usdg()\n        );\n\n        uint256 feeBasisPoints = vault.vaultUtils().getSwapFeeBasisPoints(\n            _tokenIn,\n            _tokenOut,\n            usdgAmount\n        );\n        uint256 amountOutAfterFees = _collectSwapFees(\n            _tokenOut,\n            amountOut,\n            feeBasisPoints\n        );\n        return amountOutAfterFees;\n    }\n\n    function informationFromCallback(\n        address doppelgangerContract,\n        uint256 id,\n        bool isBorderPrice,\n        uint256 amountReturn\n    ) private {\n        uint256 index = positionRouter.decreasePositionsIndex(\n            doppelgangerContract\n        );\n        bytes32 requestKey = positionRouter.getRequestKey(\n            doppelgangerContract,\n            index\n        );\n        uint256 profit = intrinsicValueOf(id);\n        liquidatePositionInfo[requestKey] = LiquidatePositionInfo(\n            id,\n            msg.sender,\n            amountReturn,\n            profit,\n            isBorderPrice\n        );\n    }\n\n    /**\n     * @notice used to liquidate the loan\n     * @param id position ID\n     **/\n    function liquidate(uint256 id) external payable {\n        require(collateralState(id), \"invalid price\");\n        require(\n            msg.value >= positionRouter.minExecutionFee(),\n            \"minExecutionFee too smal\"\n        );\n        _liquidateCollateral(id, false);\n    }\n\n    function borderPriceCoefByIndexToken(uint256 id)         \n        public\n        view\n        override\n        returns (uint256 priceCoef) {\n            return borderPriceCoef[positionInfo[id].indexToken];\n        }\n\n    /**\n     * @notice used to liquidate the loan by border price\n     * @param id collateral ID\n     **/\n    function liquidateByBorderPrice(uint256 id) external payable {\n        require(collateralStateByBorderPrice(id), \"invalid price\");\n        require(\n            msg.value >= positionRouter.minExecutionFee(),\n            \"minExecutionFee too smal\"\n        );\n        _liquidateCollateral(id, true);\n    }\n\n    function gmxPositionCallback(\n        bytes32 positionKey,\n        bool isExecuted,\n        bool isIncrease\n    ) external {\n        require(\n            msg.sender == address(positionRouter),\n            \"msg.sender is not positionRouter\"\n        );\n        address liquidator = liquidatePositionInfo[positionKey].liquidator;\n        if (liquidator != address(0)) {\n            uint256 diff = 0;\n            uint256 id = liquidatePositionInfo[positionKey].id;\n            uint256 borrowed = borrowedByCollateral[id].borrowed;\n            uint256 returnValue = liquidatePositionInfo[positionKey]\n                .amountReturn;\n            uint256 profit = liquidatePositionInfo[positionKey].profit;\n            pool.subTotalLocked(borrowed);\n            if (liquidatePositionInfo[positionKey].isBorderPrice) {\n                USDC.transfer(address(pool), borrowed);\n                USDC.transfer(\n                    collateralOwner[id],\n                    returnValue - (borrowed + (borrowed * 10) / 100)\n                );\n                USDC.transfer(liquidator, (borrowed * 10) / 100);\n                emit LiquidateByBorderPrice(\n                    collateralOwner[id],\n                    id,\n                    returnValue - (borrowed + (borrowed * 10) / 100),\n                    borrowed,\n                    (borrowed * 10) / 100\n                );\n            } else {\n                if (profit > borrowed) {\n                    diff = profit - borrowed;\n                    USDC.transfer(address(pool), borrowed + (diff * 90) / 100);\n                    USDC.transfer(liquidator, (diff * 10) / 100);\n                    USDC.transfer(\n                        collateralOwner[id],\n                        returnValue -\n                            (borrowed + (diff * 90) / 100) -\n                            (diff * 10) /\n                            100\n                    );\n                } else {\n                    USDC.transfer(address(pool), borrowed);\n                    USDC.transfer(collateralOwner[id], returnValue - borrowed);\n                }\n                emit Liquidate(\n                    collateralOwner[id],\n                    id,\n                    borrowed,\n                    (diff * 90) / 100,\n                    (diff * 10) / 100\n                );\n            }\n            collateralToken.transferFrom(\n                address(this),\n                collateralOwner[id],\n                id\n            );\n        }\n    }\n\n    function _preparationData(uint256 id)\n        internal\n        returns (address[] memory path, uint256 closeValue)\n    {\n        (, uint256 collateral, , , , , , ) = accountManager.getPosition(id);\n        (bool isProfit, uint256 delta) = accountManager.getPositionDelta(id);\n        closeValue = (isProfit ? collateral : delta);\n        if (positionInfo[id].isLong) {\n            path = new address[](2);\n            path[0] = positionInfo[id].indexToken;\n            path[1] = address(USDC);\n        } else {\n            path = new address[](1);\n            path[0] = address(USDC);\n        }\n    }\n\n    function liquidateClosePrice(uint256 id)\n        internal\n        returns (uint256 closePrice, uint256 size)\n    {\n        (size, , , , , , , ) = accountManager.getPosition(id);\n        require(size != 0, \"position size is null\");\n        closePrice =\n            (accountManager.currentPrice(id) / 1000) *\n            uint256(\n                positionInfo[id].isLong\n                    ? int256(1000) - closeSlippage\n                    : int256(1000) + closeSlippage\n            );\n    }\n\n    function isLong(uint256 id) public view override returns (bool) {\n        return accountManager.isLong(id);\n    }\n\n    function currentPrice(uint256 id) public view override returns (uint256) {\n        PositionInfo memory data = positionInfo[id];\n        if (isLong(id)) {\n            return vault.getMaxPrice(data.indexToken) / (GMX_DECIMALS / 1e8);\n        }\n        return vault.getMinPrice(data.indexToken) / (GMX_DECIMALS / 1e8);\n    }\n\n    /**\n     * @notice returns the position size and the entry price by collateral ID\n     * @param id collateral id\n     **/\n    function collateralInfo(uint256 id)\n        public\n        view\n        override\n        returns (uint256 amount, uint256 price)\n    {\n        (uint256 size, , uint256 averagePrice, , , , , ) = accountManager\n            .getPosition(id);\n        return (\n            size / (GMX_DECIMALS / 1e6),\n            averagePrice / (GMX_DECIMALS / 1e8)\n        );\n    }\n\n    function decreasePositionReturnValue(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong\n    ) internal returns (uint256) {\n        (uint256 usdOut, uint256 usdOutAfterFee) = _reduceCollateral(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _collateralDelta,\n            _sizeDelta,\n            _isLong\n        );\n        if (usdOut > 0) {\n            uint256 amountOutAfterFees = vault.usdToTokenMin(\n                _collateralToken,\n                usdOutAfterFee\n            );\n            return amountOutAfterFees;\n        }\n        return 0;\n    }\n\n    function _reduceCollateral(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong\n    ) private returns (uint256, uint256) {\n        (\n            uint256 size,\n            uint256 collateral,\n            uint256 averagePrice,\n            uint256 entryFundingRate,\n            ,\n            ,\n            ,\n            uint256 lastIncreasedTime\n        ) = vault.getPosition(_account, _collateralToken, _indexToken, _isLong);\n        uint256 fee = _collectMarginFees(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong,\n            _sizeDelta,\n            size,\n            entryFundingRate\n        );\n        (bool hasProfit, uint256 delta) = vault.getDelta(\n            _indexToken,\n            size,\n            averagePrice,\n            _isLong,\n            lastIncreasedTime\n        );\n        uint256 adjustedDelta = (_sizeDelta * delta) / size;\n        uint256 usdOut;\n        if (hasProfit && adjustedDelta > 0) {\n            usdOut = adjustedDelta;\n        }\n        if (!hasProfit && adjustedDelta > 0) {\n            collateral -= adjustedDelta;\n        }\n        if (_collateralDelta > 0) {\n            usdOut += _collateralDelta;\n            collateral -= _collateralDelta;\n        }\n        if (size == _sizeDelta) {\n            usdOut = usdOut + collateral;\n        }\n        uint256 usdOutAfterFee = usdOut;\n        if (usdOut > fee) {\n            usdOutAfterFee = usdOut - fee;\n        }\n        return (usdOut, usdOutAfterFee);\n    }\n\n    function _collectMarginFees(\n        address _account,\n        address _collateralToken,\n        address _indexToken,\n        bool _isLong,\n        uint256 _sizeDelta,\n        uint256 _size,\n        uint256 _entryFundingRate\n    ) private returns (uint256) {\n        uint256 feeUsd = _getPositionFee(_sizeDelta);\n        uint256 fundingFee = vault.getFundingFee(\n            _account,\n            _collateralToken,\n            _indexToken,\n            _isLong,\n            _size,\n            _entryFundingRate\n        );\n        feeUsd += fundingFee;\n        return feeUsd;\n    }\n\n    function _collectSwapFees(\n        address _token,\n        uint256 _amount,\n        uint256 _feeBasisPoints\n    ) private returns (uint256) {\n        uint256 afterFeeAmount = (_amount *\n            (vault.BASIS_POINTS_DIVISOR() - _feeBasisPoints)) /\n            vault.BASIS_POINTS_DIVISOR();\n        return afterFeeAmount;\n    }\n\n    function _getPositionFee(uint256 _sizeDelta) private returns (uint256) {\n        if (_sizeDelta == 0) {\n            return 0;\n        }\n        uint256 afterFeeUsd = (_sizeDelta *\n            (vault.vaultUtils().BASIS_POINTS_DIVISOR() -\n                ITimelock(vault.gov()).marginFeeBasisPoints())) /\n            vault.vaultUtils().BASIS_POINTS_DIVISOR();\n        return _sizeDelta - afterFeeUsd;\n    }\n}\n"
    },
    "contracts/DDL.sol": {
      "content": "/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * DeDeLend\n * Copyright (C) 2022 DeDeLend\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IPoolDDL.sol\";\n\nabstract contract DDL is Ownable {\n    using SafeERC20 for IERC20;\n\n    uint256 public LTV;\n    uint256 public LTV_DECIMALS = 10**4;\n\n    IERC721 public collateralToken;\n    IERC20 public USDC;\n\n    uint256 public interestRate = 19025875190258801328521216;\n    uint256 public INTEREST_RATE_DECIMALS = 10**30;\n\n    uint256 public minBorrowLimit;\n    uint256 public COLLATERAL_DECIMALS;\n\n    IPoolDDL public pool;\n\n    struct BorrowedByCollateral {\n        uint256 borrowed;\n        uint256 newBorrowTimestamp;\n    }\n\n    mapping(uint256 => BorrowedByCollateral) public borrowedByCollateral;\n    mapping(uint256 => address) public collateralOwner;\n\n    event Borrow(\n        address indexed user,\n        uint256 indexed id,\n        uint256 amount,\n        address strategy,\n        uint256 timestamp\n    );\n\n    event Repay(address indexed user, uint256 indexed optionID, uint256 amount);\n    event Liquidate(\n        address indexed user,\n        uint256 indexed optionID,\n        uint256 amount,\n        uint256 poolProfit,\n        uint256 liqFee\n    );\n    event Unlock(address indexed user, uint256 indexed optionID);\n    event ForcedExercise(\n        address indexed user,\n        uint256 indexed optionID,\n        uint256 amount,\n        uint256 poolProfit,\n        uint256 liqFee\n    );\n    event LiquidateByBorderPrice(\n        address indexed user,\n        uint256 indexed optionID,\n        uint256 userReturn,\n        uint256 poolReturn,\n        uint256 liqFee\n    );\n\n    constructor(\n        IERC721 _collateralToken,\n        IERC20 _USDC,\n        uint256 _minBorrowLimit,\n        uint256 _ltv,\n        uint256 _COLLATERAL_DECIMALS\n    ) {\n        collateralToken = _collateralToken;\n        USDC = _USDC;\n        minBorrowLimit = _minBorrowLimit;\n        LTV = _ltv;\n        COLLATERAL_DECIMALS = 10**_COLLATERAL_DECIMALS;\n    }\n\n    /**\n     * @notice used to set LTV coefficient\n     * @param value LTV coefficient.\n     **/\n    function setLTV(uint256 value) external onlyOwner {\n        require(value <= 8000, \"invalid value\");\n        LTV = value;\n    }\n\n    /**\n     * @notice used to set new interest rate\n     * @param value interest rate (in minutes)\n     **/\n    function setInterestRate(uint256 value) external onlyOwner {\n        interestRate = value;\n    }\n\n    function setInterestRateDecimals(uint256 value) external onlyOwner {\n        INTEREST_RATE_DECIMALS = value;\n    }\n\n    /**\n     * @notice used to set the minimum borrow size\n     * @param value min. borrow size (USDC)\n     **/\n    function setMinBorrowLimit(uint256 value) external onlyOwner {\n        minBorrowLimit = value;\n    }\n\n    /**\n     * @notice used to connect a new liqidity pool\n     * @param value the address of the liquidity pool\n     **/\n    function setPool(address value) external onlyOwner {\n        pool = IPoolDDL(value);\n    }\n\n    /**\n     * @notice used to lock the collateral (ERC-721) in DeDeLend\n     * @param id collateral ID\n     **/\n    function lockCollateral(uint256 id) external {\n        require(pool.openDeDeLend(), \"pauseDeDeLend\");\n        require(collateralToken.ownerOf(id) == msg.sender, \"you not owner\");\n        collateralOwner[id] = msg.sender;\n        _lockCollateral(id, msg.sender);\n    }\n\n    function _lockCollateral(uint256 id, address user) internal virtual;\n\n    /**\n     * @notice calcualtes the maximum borrow size\n     * for the specific collateral\n     * @param id collateral ID\n     **/\n    function maxBorrowLimit(uint256 id) public view returns (uint256) {\n        return (intrinsicValueOf(id) / LTV_DECIMALS) * LTV;\n    }\n\n    /**\n     * @notice send USDC to the user\n     * @param id collateral ID\n     * @param amount borrow size (USDC)\n     **/\n    function borrow(uint256 id, uint256 amount) external {\n        require(pool.openDeDeLend(), \"pauseDeDeLend\");\n        BorrowedByCollateral storage data = borrowedByCollateral[id];\n        uint256 maxLimit = maxBorrowLimit(id);\n        uint256 totalBalance = pool.getTotalBalance();\n        require(amount >= minBorrowLimit, \"amount less minBorrowLimit\");\n        require(amount + data.borrowed <= maxLimit, \"borrow is too big\");\n        require(msg.sender == collateralOwner[id], \"you are not the owner\");\n        require(\n            amount <= totalBalance,\n            \"there is not enough money in the pool\"\n        );\n        _isAvaialbleToBorrow(id);\n        if (isLong(id)) {\n            require(currentPrice(id) > borderPrice(id), \"the price is too low\");\n        } else {\n            require(\n                currentPrice(id) < borderPrice(id),\n                \"the price is too high\"\n            );\n        }\n        uint256 upcomingFee = calculateUpcomingFee(id);\n        borrowedByCollateral[id] = BorrowedByCollateral(\n            amount + data.borrowed + upcomingFee,\n            block.timestamp\n        );\n        pool.addTotalLocked(amount + upcomingFee);\n        pool.send(collateralOwner[id], amount);\n        _emitBorrow(msg.sender, id, amount, block.timestamp);\n    }\n\n    function _isAvaialbleToBorrow(uint256 id) internal virtual;\n\n    function _emitBorrow(\n        address user,\n        uint256 id,\n        uint256 amount,\n        uint256 timestamp\n    ) internal virtual;\n\n    /**\n     * @notice used to calculate how much USDC\n     * user should pay as interest fee\n     * @param id collateral ID\n     **/\n    function calculateUpcomingFee(uint256 id)\n        public\n        view\n        returns (uint256 upcomingFee)\n    {\n        BorrowedByCollateral storage data = borrowedByCollateral[id];\n        uint256 periodInMinutes = (block.timestamp - data.newBorrowTimestamp) /\n            60;\n        upcomingFee =\n            ((data.borrowed / 100) * (periodInMinutes * interestRate)) /\n            INTEREST_RATE_DECIMALS;\n    }\n\n    /**\n     * @notice used to repay the user's debt\n     * @param id collateral ID\n     * @param amount amount to repay (USDC)\n     **/\n    function repay(uint256 id, uint256 amount) external {\n        require(borrowedByCollateral[id].borrowed > 0, \"option redeemed\");\n        uint256 upcomingFee = calculateUpcomingFee(id);\n        require(\n            amount <= borrowedByCollateral[id].borrowed + upcomingFee,\n            \"amount is too big\"\n        );\n        require(msg.sender == collateralOwner[id]);\n        uint256 newBorrow = borrowedByCollateral[id].borrowed +\n            upcomingFee -\n            amount;\n        pool.subTotalLocked(amount - upcomingFee);\n        borrowedByCollateral[id] = BorrowedByCollateral(\n            newBorrow,\n            block.timestamp\n        );\n        USDC.transferFrom(collateralOwner[id], address(this), amount);\n        USDC.transfer(address(pool), amount);\n        emit Repay(msg.sender, id, amount);\n    }\n\n    /**\n     * @notice sends the collateral token back to the user\n     * @param id collateral ID\n     **/\n    function unlock(uint256 id) public {\n        require(borrowedByCollateral[id].borrowed == 0, \"loan is locked\");\n        collateralToken.transferFrom(address(this), collateralOwner[id], id);\n        emit Unlock(msg.sender, id);\n    }\n\n    function isLong(uint256 id) public view virtual returns (bool);\n\n    function collateralState(uint256 id) public view returns (bool) {\n        if (isLong(id)) {\n            return currentPrice(id) <= liqPrice(id);\n        } else {\n            return currentPrice(id) >= liqPrice(id);\n        }\n    }\n\n    function collateralStateByBorderPrice(uint256 id)\n        public\n        view\n        returns (bool)\n    {\n        if (isLong(id)) {\n            return currentPrice(id) <= borderPrice(id);\n        } else {\n            return currentPrice(id) >= borderPrice(id);\n        }\n    }\n\n    function currentPrice(uint256 id)\n        public\n        view\n        virtual\n        returns (uint256 price)\n    {}\n\n    /**\n     * @param id positon ID\n     * @notice returns the position size and the entryPrice\n     **/\n    function collateralInfo(uint256 id)\n        public\n        view\n        virtual\n        returns (uint256 amount, uint256 price);\n\n    function borderPriceCoefByIndexToken(uint256 id)        \n        public\n        view\n        virtual \n        returns (uint256 borderPriceCoef);\n\n    function borderPrice(uint256 id) public view returns (uint256 price) {\n        (, uint256 openPrice) = collateralInfo(id);\n        uint256 priceCoef = borderPriceCoefByIndexToken(id);\n        if (isLong(id)) {\n            return (openPrice * (100 + priceCoef)) / 100;\n        }\n        return (openPrice * (100 - priceCoef)) / 100;\n    }\n\n    function liqPrice(uint256 id) public view returns (uint256 price) {\n        BorrowedByCollateral storage data = borrowedByCollateral[id];\n        (uint256 amount, uint256 openPrice) = collateralInfo(id);\n        if (isLong(id)) {\n            return\n                openPrice + ((data.borrowed * 1e6) / (amount * 1e8/openPrice)) * 120 / 100 * 100;\n        }\n        return\n            openPrice - ((data.borrowed * 1e6) / (amount * 1e8/openPrice)) * 120 / 100 * 100;\n    }\n\n    function currentTriggerPrice(uint256 id)\n        public\n        view\n        returns (uint256 price)\n    {\n        if (isLong(id)) {\n            if (borderPrice(id) > liqPrice(id)) {\n                return borderPrice(id);\n            }\n            return liqPrice(id);\n        }\n        if (borderPrice(id) < liqPrice(id)) {\n            return borderPrice(id);\n        }\n        return liqPrice(id);\n    }\n\n    /**\n     * @notice position's value\n     * @param id position ID\n     **/\n    function intrinsicValueOf(uint256 id)\n        public\n        view\n        virtual\n        returns (uint256 profit);\n}\n"
    },
    "contracts/Doppelganger.sol": {
      "content": "/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * DeDeLend\n * Copyright (C) 2022 DeDeLend\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\npragma solidity 0.8.6||0.6.12;\n\nimport \"./interfaces/IPositionRouter.sol\";\nimport \"./interfaces/IRouter.sol\";\nimport \"./interfaces/IAccountManager.sol\";\nimport \"./interfaces/IVault.sol\";\nimport \"@openzeppelin/contracts/token/ERC721/ERC721.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\n\ncontract Doppelganger {\n    using SafeERC20 for IERC20;\n\n    receive() external payable{}\n\n    IPositionRouter public positionRouter;\n    mapping(address => mapping(bool => uint256)) public keyByIndexToken;\n    mapping(uint256  => bool) public keys;\n    ERC721 public GMXPT;\n    address public immutable router;\n    address[4] public indexTokenArray;\n    address[4] public stablecoinsArray;\n    address public accountManager;\n    address public ddl_gmx;\n    bool public isApproved = false;\n\n    constructor(\n        IPositionRouter _positionRouter,\n        address _router,\n        uint256[8] memory keyArray,\n        address[8] memory _indexTokenArray,\n        address[4] memory _stablecoinsArray,\n        address _accountManager,\n        address _accountManagerToken,\n        address _ddl_gmx\n    ) {\n        positionRouter = _positionRouter;\n        router = _router;\n        for (uint256 i = 0; i < 8; i++) {\n            if (i < 4) {\n                indexTokenArray[i] = _indexTokenArray[i];\n                stablecoinsArray[i] = _stablecoinsArray[i];\n            }\n            keyByIndexToken[_indexTokenArray[i]][\n                i < 4 ? true : false\n            ] = keyArray[i];\n            keys[keyArray[i]] = true; \n        }\n        GMXPT = ERC721(_accountManagerToken);\n        accountManager = _accountManager;\n        ddl_gmx = _ddl_gmx;\n    }\n\n    function _checkKeyAndMsgSender(address user, address _indexToken, bool _isLong) private {\n        require(\n            GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]) == user,\n            \"You re not the owner of the position\"\n        );\n        require(keys[keyByIndexToken[_indexToken][_isLong]], \"invalid key\");\n        if (msg.sender != ddl_gmx) {\n            require(msg.sender == accountManager, \"invalid msg.sender\");\n        }\n    }\n\n    function createIncreasePosition(\n        address user,\n        address[] memory _path,\n        address _indexToken,\n        uint256 _amountIn,\n        uint256 _minOut,\n        uint256 _sizeDelta,\n        bool _isLong,\n        uint256 _acceptablePrice,\n        uint256 _executionFee,\n        bytes32 _referralCode,\n        address _callbackTarget\n    ) external payable {\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\n        positionRouter.createIncreasePosition{value: msg.value}(\n            _path,\n            _indexToken,\n            _amountIn,\n            _minOut,\n            _sizeDelta,\n            _isLong,\n            _acceptablePrice,\n            _executionFee,\n            _referralCode,\n            _callbackTarget\n        );\n    }\n\n    function createIncreasePositionETH(\n        address user,\n        address[] memory _path,\n        address _indexToken,\n        uint256 _amountIn,\n        uint256 _minOut,\n        uint256 _sizeDelta,\n        bool _isLong,\n        uint256 _acceptablePrice,\n        uint256 _executionFee,\n        bytes32 _referralCode,\n        address _callbackTarget\n    ) external payable {\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\n        positionRouter.createIncreasePositionETH{value: msg.value}(\n            _path,\n            _indexToken,\n            _minOut,\n            _sizeDelta,\n            _isLong,\n            _acceptablePrice,\n            _executionFee,\n            _referralCode,\n            _callbackTarget\n        );\n    }\n\n    function createDecreasePosition(\n        address user,\n        address[] memory _path,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        uint256 _acceptablePrice,\n        uint256 _minOut,\n        uint256 _executionFee,\n        bool _withdrawETH,\n        address _callbackTarget\n    ) external payable {\n        address keyOwner = GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]);\n        require(keyOwner == user, \"You are not the owner of the position\");\n        if (msg.sender != ddl_gmx) {\n            require(msg.sender == accountManager, \"invalid msg.sender\");\n        }\n        positionRouter.createDecreasePosition{value: msg.value}(\n            _path,\n            _indexToken,\n            _collateralDelta,\n            _sizeDelta,\n            _isLong,\n            keyOwner,\n            _acceptablePrice,\n            _minOut,\n            _executionFee,\n            _withdrawETH,\n            _callbackTarget\n        );\n    }\n\n    /**\n     * @param value maxUnit256\n     **/\n    function approveAll(uint256 value) public {\n        IRouter(router).approvePlugin(address(positionRouter));\n        for (uint256 i = 0; i < 4; i++) {\n            ERC20(indexTokenArray[i]).approve(address(positionRouter), value);\n            ERC20(indexTokenArray[i]).approve(router, value);\n            ERC20(stablecoinsArray[i]).approve(address(positionRouter), value);\n            ERC20(stablecoinsArray[i]).approve(router, value);\n        }\n        isApproved = true;\n    }\n}\n"
    },
    "contracts/interfaces/IAccountManager.sol": {
      "content": "pragma solidity 0.8.6;\n\ninterface IAccountManager {\n    enum Symbols {\n        ETH_USD_LONG,\n        BTC_USD_LONG,\n        LINK_USD_LONG,\n        UNI_USD_LONG,\n        ETH_USD_SHORT,\n        BTC_USD_SHORT,\n        LINK_USD_SHORT,\n        UNI_USD_SHORT\n    }\n    function keyData(uint256 id) external returns (\n        Symbols symbol, \n        address doppelgangerContract, \n        bool isLong,\n        address indexToken,\n        address user\n    );\n    function indexTokenBySymbol(Symbols symbol) external returns (address indexToken);\n    function getPositionDelta(uint256 id) external view returns (bool isProfit, uint256 profit);\n    function getPosition(uint256 id) external view returns (\n        uint256 size, \n        uint256 collateral, \n        uint256 averagePrice, \n        uint256 entryFundingRate, \n        uint256 reserveAmount, \n        uint256 realisedPnl,\n        bool isProfit, \n        uint256 lastIncreasedTime\n    );\n    function currentPrice(uint256 id) external view returns (uint256 price);\n    function isLong(uint256 id) external view returns (bool);\n}"
    },
    "contracts/interfaces/IOrderBook.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.6 || 0.6.12;\n\ninterface IOrderBook {\n\tfunction getSwapOrder(address _account, uint256 _orderIndex) external view returns (\n        address path0, \n        address path1,\n        address path2,\n        uint256 amountIn,\n        uint256 minOut,\n        uint256 triggerRatio,\n        bool triggerAboveThreshold,\n        bool shouldUnwrap,\n        uint256 executionFee\n    );\n\n    function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\n        address purchaseToken, \n        uint256 purchaseTokenAmount,\n        address collateralToken,\n        address indexToken,\n        uint256 sizeDelta,\n        bool isLong,\n        uint256 triggerPrice,\n        bool triggerAboveThreshold,\n        uint256 executionFee\n    );\n\n    function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\n        address collateralToken,\n        uint256 collateralDelta,\n        address indexToken,\n        uint256 sizeDelta,\n        bool isLong,\n        uint256 triggerPrice,\n        bool triggerAboveThreshold,\n        uint256 executionFee\n    );\n\n    function createIncreaseOrder(\n        address[] memory _path,\n        uint256 _amountIn,\n        address _indexToken,\n        uint256 _minOut,\n        uint256 _sizeDelta,\n        address _collateralToken,\n        bool _isLong,\n        uint256 _triggerPrice,\n        bool _triggerAboveThreshold,\n        uint256 _executionFee,\n        bool _shouldWrap\n    ) external payable;\n    function cancelIncreaseOrder(uint256 _orderIndex) external;\n    function executeIncreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) external;\n    function updateIncreaseOrder(uint256 _orderIndex, uint256 _sizeDelta, uint256 _triggerPrice, bool _triggerAboveThreshold) external;\n\n    function createDecreaseOrder(\n        address _indexToken,\n        uint256 _sizeDelta,\n        address _collateralToken,\n        uint256 _collateralDelta,\n        bool _isLong,\n        uint256 _triggerPrice,\n        bool _triggerAboveThreshold\n    ) external payable;\n    function executeDecreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) external;\n    function cancelDecreaseOrder(uint256 _orderIndex) external;\n    function updateDecreaseOrder(\n        uint256 _orderIndex,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        uint256 _triggerPrice,\n        bool _triggerAboveThreshold\n    ) external;\n\n    function minExecutionFee() external view returns (uint256 minExecutionFee);\n}\n"
    },
    "contracts/interfaces/IPoolDDL.sol": {
      "content": "pragma solidity 0.8.6;\n\ninterface IPoolDDL {\n    function send(address to, uint amount) external;\n    function getTotalBalance() external view returns (uint256 balance);\n    function addTotalLocked(uint256 value) external;\n    function subTotalLocked(uint256 value) external; \n    function openDeDeLend() external view returns (bool openDeDeLend);\n}"
    },
    "contracts/interfaces/IPositionRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.6 || 0.6.12;\n\ninterface IPositionRouter {\n    function increasePositionRequestKeysStart() external returns (uint256);\n    function decreasePositionRequestKeysStart() external returns (uint256);\n    function executeIncreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\n    function executeIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\n    function executeDecreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\n    function cancelIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\n    function executeDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\n    function cancelDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\n    function createIncreasePosition(\n        address[] memory _path,\n        address _indexToken,\n        uint256 _amountIn,\n        uint256 _minOut,\n        uint256 _sizeDelta,\n        bool _isLong,\n        uint256 _acceptablePrice,\n        uint256 _executionFee,\n        bytes32 _referralCode,\n        address _callbackTarget\n    ) external payable;\n    function createIncreasePositionETH(\n        address[] memory _path,\n        address _indexToken,\n        uint256 _minOut,\n        uint256 _sizeDelta,\n        bool _isLong,\n        uint256 _acceptablePrice,\n        uint256 _executionFee,\n        bytes32 _referralCode,\n        address _callbackTarget\n    ) external payable;\n    function createDecreasePosition(\n        address[] memory _path,\n        address _indexToken,\n        uint256 _collateralDelta,\n        uint256 _sizeDelta,\n        bool _isLong,\n        address _receiver,\n        uint256 _acceptablePrice,\n        uint256 _minOut,\n        uint256 _executionFee,\n        bool _withdrawETH,\n        address _callbackTarget\n    ) external payable;\n    function minExecutionFee() external view returns (uint256 minExecutionFee);\n    function getRequestKey(address _account, uint256 _index) external pure returns (bytes32);\n    function decreasePositionsIndex(address _account) external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IRouter.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.6 || 0.6.12;\n\ninterface IRouter {\n    function addPlugin(address _plugin) external;\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external;\n    function pluginIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\n    function pluginDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\n    function approvePlugin(address _plugin) external;\n}\n"
    },
    "contracts/interfaces/ITimelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12 || 0.8.6;\n\ninterface ITimelock {\n    function setAdmin(address _admin) external;\n    function enableLeverage(address _vault) external;\n    function disableLeverage(address _vault) external;\n    function setIsLeverageEnabled(address _vault, bool _isLeverageEnabled) external;\n    function signalSetGov(address _target, address _gov) external;\n    function marginFeeBasisPoints() external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IVault.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12 || 0.8.6;\n\nimport \"./IVaultUtils.sol\";\n\ninterface IVault {\n    function isInitialized() external view returns (bool);\n    function isSwapEnabled() external view returns (bool);\n    function isLeverageEnabled() external view returns (bool);\n\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\n    function setError(uint256 _errorCode, string calldata _error) external;\n\n    function router() external view returns (address);\n    function usdg() external view returns (address);\n    function gov() external view returns (address);\n\n    function whitelistedTokenCount() external view returns (uint256);\n    function maxLeverage() external view returns (uint256);\n    function adjustForDecimals(uint256 _amount, address _tokenDiv, address _tokenMul) external view returns (uint256);\n\n    function minProfitTime() external view returns (uint256);\n    function hasDynamicFees() external view returns (bool);\n    function fundingInterval() external view returns (uint256);\n    function totalTokenWeights() external view returns (uint256);\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\n\n    function inManagerMode() external view returns (bool);\n    function inPrivateLiquidationMode() external view returns (bool);\n\n    function maxGasPrice() external view returns (uint256);\n\n    function approvedRouters(address _account, address _router) external view returns (bool);\n    function isLiquidator(address _account) external view returns (bool);\n    function isManager(address _account) external view returns (bool);\n\n    function minProfitBasisPoints(address _token) external view returns (uint256);\n    function tokenBalances(address _token) external view returns (uint256);\n    function lastFundingTimes(address _token) external view returns (uint256);\n\n    function setMaxLeverage(uint256 _maxLeverage) external;\n    function setInManagerMode(bool _inManagerMode) external;\n    function setManager(address _manager, bool _isManager) external;\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\n    function setUsdgAmount(address _token, uint256 _amount) external;\n    function setBufferAmount(address _token, uint256 _amount) external;\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\n    function setLiquidator(address _liquidator, bool _isActive) external;\n\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\n\n    function setFees(\n        uint256 _taxBasisPoints,\n        uint256 _stableTaxBasisPoints,\n        uint256 _mintBurnFeeBasisPoints,\n        uint256 _swapFeeBasisPoints,\n        uint256 _stableSwapFeeBasisPoints,\n        uint256 _marginFeeBasisPoints,\n        uint256 _liquidationFeeUsd,\n        uint256 _minProfitTime,\n        bool _hasDynamicFees\n    ) external;\n\n    function setTokenConfig(\n        address _token,\n        uint256 _tokenDecimals,\n        uint256 _redemptionBps,\n        uint256 _minProfitBps,\n        uint256 _maxUsdgAmount,\n        bool _isStable,\n        bool _isShortable\n    ) external;\n\n    function setPriceFeed(address _priceFeed) external;\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\n\n    function directPoolDeposit(address _token) external;\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\n\n    function priceFeed() external view returns (address);\n    function fundingRateFactor() external view returns (uint256);\n    function stableFundingRateFactor() external view returns (uint256);\n    function cumulativeFundingRates(address _token) external view returns (uint256);\n    function getNextFundingRate(address _token) external view returns (uint256);\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\n\n    function liquidationFeeUsd() external view returns (uint256);\n    function taxBasisPoints() external view returns (uint256);\n    function stableTaxBasisPoints() external view returns (uint256);\n    function mintBurnFeeBasisPoints() external view returns (uint256);\n    function swapFeeBasisPoints() external view returns (uint256);\n    function stableSwapFeeBasisPoints() external view returns (uint256);\n    function marginFeeBasisPoints() external view returns (uint256);\n\n    function allWhitelistedTokensLength() external view returns (uint256);\n    function allWhitelistedTokens(uint256) external view returns (address);\n    function whitelistedTokens(address _token) external view returns (bool);\n    function stableTokens(address _token) external view returns (bool);\n    function shortableTokens(address _token) external view returns (bool);\n    function feeReserves(address _token) external view returns (uint256);\n    function globalShortSizes(address _token) external view returns (uint256);\n    function globalShortAveragePrices(address _token) external view returns (uint256);\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\n    function tokenDecimals(address _token) external view returns (uint256);\n    function tokenWeights(address _token) external view returns (uint256);\n    function guaranteedUsd(address _token) external view returns (uint256);\n    function poolAmounts(address _token) external view returns (uint256);\n    function bufferAmounts(address _token) external view returns (uint256);\n    function reservedAmounts(address _token) external view returns (uint256);\n    function usdgAmounts(address _token) external view returns (uint256);\n    function maxUsdgAmounts(address _token) external view returns (uint256);\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\n    function getMaxPrice(address _token) external view returns (uint256);\n    function getMinPrice(address _token) external view returns (uint256);\n\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\n    function getPositionDelta(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (bool, uint256);\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\n    function usdToTokenMin(address _token, uint256 _usdAmount) external view returns (uint256);\n    function vaultUtils() external returns(IVaultUtils vaultUtils);\n    function BASIS_POINTS_DIVISOR() external returns (uint256);\n}\n"
    },
    "contracts/interfaces/IVaultUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.6.12 || 0.8.6;\n\ninterface IVaultUtils {\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\n    function BASIS_POINTS_DIVISOR() external returns (uint256);\n}\n"
    },
    "contracts/PoolDDL.sol": {
      "content": "/**\n * SPDX-License-Identifier: GPL-3.0-or-later\n * DeDeLend\n * Copyright (C) 2022 DeDeLend\n *\n * This program is free software: you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation, either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\n **/\n\npragma solidity 0.8.6;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\nimport \"@openzeppelin/contracts/access/Ownable.sol\";\n\ncontract PoolDDL is Ownable, ERC20(\"Writing DDL\", \"DDL\") {\n    uint256 public constant INITIAL_RATE = 1e18;\n    uint256 public maxDepositAmount = type(uint256).max;\n    mapping(address => bool) public ddlContracts;\n    IERC20 public token;\n    uint256 public totalLocked;\n    bool public openDeDeLend = true;\n    mapping(address => uint256) public timelock;\n    uint256 private constant _TIMELOCK = 7 days;\n\n    event Provide(address indexed user, uint256 amount);\n    event Withdraw(address indexed user, uint256 amount);\n\n    modifier notLocked(address contr) {\n        require(\n        timelock[contr] != 0 && timelock[contr] <= block.timestamp,\n        \"Function is timelocked\"\n        );\n        _;\n    }\n\n    function unlockFunction(address contr) public onlyOwner {\n        timelock[contr] = block.timestamp + _TIMELOCK;\n    }\n\n    function setUniswapPool(address value) public onlyOwner notLocked(value) {\n        ddlContracts[value] = true;\n        timelock[value] = 0;\n    }\n\n    function changeOpenDeDeLend(bool value) external onlyOwner {\n        openDeDeLend = value;\n    }\n\n    function addTotalLocked(uint256 value) public {\n        require(ddlContracts[msg.sender]);\n        totalLocked += value;\n    }\n\n    function subTotalLocked(uint256 value) public {\n        require(ddlContracts[msg.sender]);\n        totalLocked -= value;\n    }\n\n    function getTotalBalance() public view returns (uint256 balance) {\n        balance = token.balanceOf(address(this));\n    }\n\n    function shareOf(address account) external view returns (uint256 share) {\n        if (totalSupply() > 0)\n            share = (getTotalBalance() * balanceOf(account)) / totalSupply();\n        else share = 0;\n    }\n\n    constructor(\n        IERC20 _token,\n        address ddlContract1,\n        address ddlContract2,\n        address ddlContract3\n    ) {\n        token = _token;\n        ddlContracts[ddlContract1] = true;\n        ddlContracts[ddlContract2] = true;\n        ddlContracts[ddlContract3] = true;\n    }\n\n    function provideFrom(\n        uint256 amount,\n        uint256 minShare\n    ) external returns (uint256 share) {\n        require(openDeDeLend, \"pauseDeDeLend\");\n        uint256 totalBalance = getTotalBalance() + totalLocked;\n        share = totalSupply() > 0 && totalBalance > 0\n            ? (amount * totalSupply()) / totalBalance\n            : amount * INITIAL_RATE;\n        uint256 limit = maxDepositAmount - totalBalance;\n        require(share >= minShare, \"Pool Error: The mint limit is too large\");\n        require(share > 0, \"Pool Error: The amount is too small\");\n        require(\n            amount <= limit,\n            \"Pool Error: providing USDC is paused\"\n        );\n\n        token.transferFrom(msg.sender, address(this), amount);\n        _mint(msg.sender, share);\n        emit Provide(msg.sender, amount);\n    }\n\n    function withdraw(uint256 amount) external {\n        uint256 totalBalance = getTotalBalance() + totalLocked;\n        require(amount <= getTotalBalance());\n        uint256 burn = (amount * totalSupply()) / totalBalance;\n        require(burn <= balanceOf(msg.sender), \"Amount is too large\");\n        _burn(msg.sender, burn);\n        token.transfer(msg.sender, amount);\n        emit Withdraw(msg.sender, amount);\n    }\n\n    function send(address to, uint256 amount) public {\n        require(ddlContracts[msg.sender]);\n        require(amount <= getTotalBalance());\n        token.transfer(to, amount);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200,
      "details": {
        "yul": true,
        "yulDetails": {
          "stackAllocation": true
        }
      }
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates",
          "devdoc",
          "userdoc"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}