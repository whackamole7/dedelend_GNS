{
  "address": "0x3E00742B94607a5c7DDfd00c5c156a9c411D771A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IAccountManagerToken",
          "name": "_accountManagerToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_router",
          "type": "address"
        },
        {
          "internalType": "contract IVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "contract IPositionRouter",
          "name": "_positionRouter",
          "type": "address"
        },
        {
          "internalType": "address[4]",
          "name": "_arrLongIndexToken",
          "type": "address[4]"
        },
        {
          "internalType": "address[4]",
          "name": "_arrShortIndexToken",
          "type": "address[4]"
        },
        {
          "internalType": "bool[2]",
          "name": "_permissions",
          "type": "bool[2]"
        },
        {
          "internalType": "address",
          "name": "_manager",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "accountManagerToken",
      "outputs": [
        {
          "internalType": "contract IAccountManagerToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arrLongIndexToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "arrShortIndexToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_collateralDelta",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_acceptablePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_executionFee",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_withdrawETH",
          "type": "bool"
        }
      ],
      "name": "createDecreasePosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "createDoppelgangerGMX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_acceptablePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_executionFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_referralCode",
          "type": "bytes32"
        }
      ],
      "name": "createIncreasePosition",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_path",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_indexToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountIn",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minOut",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_sizeDelta",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_isLong",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "_acceptablePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_executionFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_referralCode",
          "type": "bytes32"
        }
      ],
      "name": "createIncreasePositionETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "currentPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ddl_gmx",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "doppelgangerMap",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "averagePrice",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "entryFundingRate",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "reserveAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "realisedPnl",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isProfit",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lastIncreasedTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "getPositionDelta",
      "outputs": [
        {
          "internalType": "bool",
          "name": "isProfit",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "profit",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAccountManager.Symbols",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "indexTokenBySymbol",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "id",
          "type": "uint256"
        }
      ],
      "name": "isLong",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "keyData",
      "outputs": [
        {
          "internalType": "enum IAccountManager.Symbols",
          "name": "symbol",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "doppelgangerContract",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isLong",
          "type": "bool"
        },
        {
          "internalType": "address",
          "name": "indexToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "manager",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAccountManager.Symbols",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "permissions",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "positionRouter",
      "outputs": [
        {
          "internalType": "contract IPositionRouter",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "router",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "setDDL_GMX",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "value",
          "type": "address"
        }
      ],
      "name": "setManager",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum IAccountManager.Symbols",
          "name": "symbol",
          "type": "uint8"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "setPermission",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "name": "symbolByIndexToken",
      "outputs": [
        {
          "internalType": "enum IAccountManager.Symbols",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x208decdf0bd058e1db3312ab3b434eeafc6ed572983dc8d4d033184886accdf3",
  "receipt": {
    "to": null,
    "from": "0x8B57f3a9bDf2cfdBF9B2627ff8bEa86fB5641a50",
    "contractAddress": "0x3E00742B94607a5c7DDfd00c5c156a9c411D771A",
    "transactionIndex": 1,
    "gasUsed": "21530285",
    "logsBloom": "0x
    "blockHash": "0xb67d56a83fe4d64fbdf8cc12c79296a7b3eddb83e905d632e472715dc40b5376",
    "transactionHash": "0x208decdf0bd058e1db3312ab3b434eeafc6ed572983dc8d4d033184886accdf3",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 49889025,
        "transactionHash": "0x208decdf0bd058e1db3312ab3b434eeafc6ed572983dc8d4d033184886accdf3",
        "address": "0x3E00742B94607a5c7DDfd00c5c156a9c411D771A",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000008b57f3a9bdf2cfdbf9b2627ff8bea86fb5641a50"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xb67d56a83fe4d64fbdf8cc12c79296a7b3eddb83e905d632e472715dc40b5376"
      }
    ],
    "blockNumber": 49889025,
    "cumulativeGasUsed": "21530285",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1E80d34cA3A302670D423E6C3A5dD8c7b46250EB",
    "0xaBBc5F99639c9B6bCb58544ddf04EFA6802F4064",
    "0x489ee077994B6658eAfA855C308275EAd8097C4A",
    "0xb87a436B93fFE9D75c5cFA7bAcFff96430b09868",
    [
      "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
      "0x2f2a2543B76A4166549F7aaB2e75Bef0aefC5B0f",
      "0xf97f4df75117a78c1A5a0DBb814Af92458539FB4",
      "0xFa7F8980b0f1E64A2062791cc3b0871572f1F7f0"
    ],
    [
      "0xFF970A61A04b1cA14834A43f5dE4533eBDDB5CC8",
      "0xFd086bC7CD5C481DCC9C85ebE478A1C0b69FCbb9",
      "0x17FC002b466eEc40DaE837Fc4bE5c67993ddBd6F",
      "0xDA10009cBd5D07dd0CeCc66161FC93D7c9000da1"
    ],
    [
      true,
      true
    ],
    "0x40243C8EfD23a09018E624b8DF8197A48deEAc82"
  ],
  "numDeployments": 1,
  "solcInputHash": "73e04658a56aaa777a8bbc06dcee20b5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.6+commit.11564f7e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IAccountManagerToken\",\"name\":\"_accountManagerToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_router\",\"type\":\"address\"},{\"internalType\":\"contract IVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IPositionRouter\",\"name\":\"_positionRouter\",\"type\":\"address\"},{\"internalType\":\"address[4]\",\"name\":\"_arrLongIndexToken\",\"type\":\"address[4]\"},{\"internalType\":\"address[4]\",\"name\":\"_arrShortIndexToken\",\"type\":\"address[4]\"},{\"internalType\":\"bool[2]\",\"name\":\"_permissions\",\"type\":\"bool[2]\"},{\"internalType\":\"address\",\"name\":\"_manager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"accountManagerToken\",\"outputs\":[{\"internalType\":\"contract IAccountManagerToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrLongIndexToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"arrShortIndexToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_collateralDelta\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_withdrawETH\",\"type\":\"bool\"}],\"name\":\"createDecreasePosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"createDoppelgangerGMX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_referralCode\",\"type\":\"bytes32\"}],\"name\":\"createIncreasePosition\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_indexToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minOut\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_sizeDelta\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_isLong\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"_acceptablePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_executionFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_referralCode\",\"type\":\"bytes32\"}],\"name\":\"createIncreasePositionETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"currentPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ddl_gmx\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"doppelgangerMap\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"averagePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"entryFundingRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"realisedPnl\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isProfit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastIncreasedTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"getPositionDelta\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"isProfit\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"profit\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAccountManager.Symbols\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"indexTokenBySymbol\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"}],\"name\":\"isLong\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"keyData\",\"outputs\":[{\"internalType\":\"enum IAccountManager.Symbols\",\"name\":\"symbol\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"doppelgangerContract\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isLong\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"indexToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"manager\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAccountManager.Symbols\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"permissions\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"positionRouter\",\"outputs\":[{\"internalType\":\"contract IPositionRouter\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"router\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setDDL_GMX\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"value\",\"type\":\"address\"}],\"name\":\"setManager\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum IAccountManager.Symbols\",\"name\":\"symbol\",\"type\":\"uint8\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setPermission\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"name\":\"symbolByIndexToken\",\"outputs\":[{\"internalType\":\"enum IAccountManager.Symbols\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"currentPrice(uint256)\":{\"params\":{\"id\":\"position ID\"}},\"getPosition(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}},\"getPositionDelta(uint256)\":{\"params\":{\"id\":\"collateral ID*\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setDDL_GMX(address)\":{\"params\":{\"value\":\"the address of DDL_GMX*\"}},\"setPermission(uint8,bool)\":{\"params\":{\"symbol\":\"symbol name\",\"value\":\"true or false *\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createDecreasePosition(address[],address,uint256,uint256,bool,uint256,uint256,uint256,bool)\":{\"notice\":\"used to decrease position on GMX*\"},\"createDoppelgangerGMX()\":{\"notice\":\"creates Doppelganger account for the user*\"},\"createIncreasePosition(address[],address,uint256,uint256,uint256,bool,uint256,uint256,bytes32)\":{\"notice\":\"used to increase position on GMX*\"},\"createIncreasePositionETH(address[],address,uint256,uint256,uint256,bool,uint256,uint256,bytes32)\":{\"notice\":\"used to increase position on GMX (only ETH)*\"},\"currentPrice(uint256)\":{\"notice\":\"returns currentPrice for the asset*\"},\"getPosition(uint256)\":{\"notice\":\"returns getPosition by the collateral\"},\"getPositionDelta(uint256)\":{\"notice\":\"returns getPositionDelta from GMX by the collateral ID\"},\"setDDL_GMX(address)\":{\"notice\":\"set new DDL_GMX address\"},\"setPermission(uint8,bool)\":{\"notice\":\"set permissions for trading pairs\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/AccountManager.sol\":\"AccountManager\"},\"evmVersion\":\"berlin\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\\n            // decrementing then incrementing.\\n            _balances[to] += amount;\\n        }\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        unchecked {\\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\\n            _balances[account] += amount;\\n        }\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\\n            _totalSupply -= amount;\\n        }\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x4ffc0547c02ad22925310c585c0f166f8759e2648a09e9b489100c42f15dd98d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256, /* firstTokenId */\\n        uint256 batchSize\\n    ) internal virtual {\\n        if (batchSize > 1) {\\n            if (from != address(0)) {\\n                _balances[from] -= batchSize;\\n            }\\n            if (to != address(0)) {\\n                _balances[to] += batchSize;\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0xd89f3585b211fc9e3408384a4c4efdc3a93b2f877a3821046fa01c219d35be1b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/AccountManager.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * DeDeLend\\n * Copyright (C) 2022 DeDeLend\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\npragma solidity 0.8.6;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"./interfaces/IAccountManagerToken.sol\\\";\\nimport \\\"./interfaces/IOrderBook.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"./Doppelganger.sol\\\";\\n\\ncontract AccountManager is\\n    Ownable,\\n    IAccountManager\\n{\\n    IAccountManagerToken public immutable accountManagerToken;\\n    address public ddl_gmx;\\n    address public immutable router;\\n    IVault public immutable vault;\\n    IPositionRouter public immutable positionRouter;\\n    mapping(address => address payable) public doppelgangerMap;\\n    struct KeyInformation {\\n        Symbols symbol;\\n        address doppelgangerContract;\\n        bool isLong;\\n        address indexToken;\\n        address user;\\n    }\\n    mapping(uint256 => KeyInformation) public override keyData;\\n    mapping(address => mapping(bool => Symbols)) public symbolByIndexToken;\\n    mapping(Symbols => address) public override indexTokenBySymbol;\\n    mapping(Symbols => bool) public permissions;\\n    address public manager;\\n\\n    address[4] public arrLongIndexToken;\\n    address[4] public arrShortIndexToken;\\n\\n    constructor(\\n        IAccountManagerToken _accountManagerToken,\\n        address _router, \\n        IVault _vault,\\n        IPositionRouter _positionRouter,\\n        address[4] memory _arrLongIndexToken,\\n        address[4] memory _arrShortIndexToken,\\n        bool[2] memory _permissions,\\n        address _manager\\n    ) {\\n        accountManagerToken = _accountManagerToken;\\n        router = _router;\\n        vault = _vault;\\n        positionRouter = _positionRouter;\\n        arrLongIndexToken = _arrLongIndexToken;\\n        arrShortIndexToken = _arrShortIndexToken;\\n        symbolByIndexToken[_arrLongIndexToken[0]][true] = Symbols(0);\\n        symbolByIndexToken[_arrShortIndexToken[0]][false] = Symbols(1);\\n        permissions[Symbols(0)] = _permissions[0]; \\n        permissions[Symbols(1)] = _permissions[1]; \\n        indexTokenBySymbol[Symbols(0)] = _arrLongIndexToken[0];\\n        indexTokenBySymbol[Symbols(1)] = _arrLongIndexToken[0];\\n        manager = _manager;\\n    }\\n\\n    modifier checkDoppelganger() {\\n        require(address(0) != doppelgangerMap[msg.sender], \\\"you don't have Doppelganger\\\");\\n        _;\\n    }\\n\\n    function checkPermissions(address _indexToken, bool _isLong) private {\\n        require(permissions[symbolByIndexToken[_indexToken][_isLong]], \\\"trading on this pair is stopped\\\");\\n    }\\n\\n    function setManager(address value) external onlyOwner {\\n        manager = value;\\n    }\\n\\n    /**\\n     * @notice set new DDL_GMX address\\n     * @param value the address of DDL_GMX\\n     **/\\n    function setDDL_GMX(address value) external onlyOwner {\\n        ddl_gmx = value;\\n    }\\n\\n    /**\\n     * @notice set permissions for trading pairs\\n     * @param symbol symbol name\\n     * @param value true or false \\n     **/\\n     function setPermission(Symbols symbol, bool value) external onlyOwner {\\n        permissions[symbol] = value;\\n    }\\n\\n    /**\\n     * @notice creates Doppelganger account for the user\\n     **/\\n    function createDoppelgangerGMX() public {\\n        require(\\n            doppelgangerMap[msg.sender] == address(0),\\n            \\\"Doppelganger for this address already exist\\\"\\n        );\\n        uint256 id = accountManagerToken.tokenId();\\n        accountManagerToken.addTokenId(2);\\n        uint256[2] memory keys;\\n        for (uint256 key = 0; key < 2; key++) {\\n            keys[key] = (id + key);\\n        }\\n        Doppelganger newContract = new Doppelganger(\\n            positionRouter,\\n            router,\\n            keys,\\n            arrLongIndexToken,\\n            arrShortIndexToken,\\n            address(this),\\n            address(accountManagerToken),\\n            ddl_gmx,\\n            manager\\n        );\\n        doppelgangerMap[msg.sender] =  payable(address(newContract));\\n        for (uint256 i = 0; i < 2; i++) {\\n            keyData[id + i] = KeyInformation(\\n                Symbols(i),\\n                address(newContract),\\n                i < 1 ? true : false,\\n                arrLongIndexToken[0],\\n                msg.sender\\n            );\\n            accountManagerToken.mint(msg.sender, id + i);\\n        }\\n    }\\n\\n    /**\\n     * @notice returns getPositionDelta from GMX by the collateral ID\\n     * @param id collateral ID\\n     **/\\n    function getPositionDelta(uint256 id)\\n        public\\n        view\\n        override\\n        returns (bool isProfit, uint256 profit)\\n    {\\n        return\\n            vault.getPositionDelta(\\n                keyData[id].doppelgangerContract,\\n                keyData[id].isLong\\n                    ? keyData[id].indexToken\\n                    : arrShortIndexToken[0],\\n                keyData[id].indexToken,\\n                keyData[id].isLong\\n            );\\n    }\\n\\n    /**\\n     * @notice returns getPosition by the collateral\\n     * @param id collateral ID\\n     **/\\n    function getPosition(uint256 id)\\n        public\\n        view\\n        override\\n        returns (\\n            uint256 size,\\n            uint256 collateral,\\n            uint256 averagePrice,\\n            uint256 entryFundingRate,\\n            uint256 reserveAmount,\\n            uint256 realisedPnl,\\n            bool isProfit,\\n            uint256 lastIncreasedTime\\n        )\\n    {\\n        (\\n            size,\\n            collateral,\\n            averagePrice,\\n            entryFundingRate,\\n            reserveAmount,\\n            realisedPnl,\\n            isProfit,\\n            lastIncreasedTime\\n        ) = vault.getPosition(\\n            keyData[id].doppelgangerContract,\\n            keyData[id].isLong\\n                ? keyData[id].indexToken\\n                : arrShortIndexToken[0],\\n            keyData[id].indexToken,\\n            keyData[id].isLong\\n        );\\n    }\\n\\n    function isLong(uint256 id) public view override returns (bool) {\\n        return keyData[id].isLong;\\n    }\\n\\n    /**\\n     * @param id position ID\\n     * @notice returns currentPrice for the asset\\n     **/\\n    function currentPrice(uint256 id) public view override returns (uint256) {\\n        if (isLong(id)) {\\n            return vault.getMaxPrice(keyData[id].indexToken);\\n        }\\n        return vault.getMinPrice(keyData[id].indexToken);\\n    }\\n\\n    /**\\n     * @notice used to increase position on GMX\\n     **/\\n    function createIncreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode\\n    ) external payable checkDoppelganger {\\n        checkPermissions(_indexToken, _isLong);\\n        (,,uint256 averagePrice,,,,,) = vault.getPosition(\\n            doppelgangerMap[msg.sender],\\n            _isLong ? arrShortIndexToken[0] : arrLongIndexToken[0],\\n            arrLongIndexToken[0],\\n            !_isLong\\n        );\\n        require(averagePrice == 0, \\\"You cannot open a long/short position at the same time\\\");\\n        if (!_isLong) {\\n            if (_path.length == 2) {\\n                require(_path[1] == arrShortIndexToken[0], \\\"To open the short position, you have to use USDC as collateral\\\");\\n            }\\n            if (_path[0] != arrShortIndexToken[0]) {\\n                address tokenIn = _path[0];\\n                _path = new address[](2);\\n                _path[0] = tokenIn;\\n                _path[1] = arrShortIndexToken[0];\\n            }\\n        }\\n        ERC20(_path[0]).transferFrom(\\n            msg.sender,\\n            doppelgangerMap[msg.sender],\\n            _amountIn\\n        );\\n        Doppelganger(doppelgangerMap[msg.sender]).createIncreasePosition{value: msg.value}(\\n            msg.sender,\\n            _path,\\n            _indexToken,\\n            _amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            _referralCode,\\n            ddl_gmx\\n        );\\n    }\\n\\n    /**\\n     * @notice used to increase position on GMX (only ETH)\\n     **/\\n    function createIncreasePositionETH(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode\\n    ) external payable checkDoppelganger {\\n        checkPermissions(_indexToken, _isLong);\\n        (,,uint256 averagePrice,,,,,) = vault.getPosition(\\n            doppelgangerMap[msg.sender],\\n            _isLong ? arrShortIndexToken[0] : arrLongIndexToken[0],\\n            arrLongIndexToken[0],\\n            !_isLong\\n        );\\n        require(averagePrice == 0, \\\"You cannot open a long/short position at the same time\\\");\\n        if (!_isLong) {\\n            if (_path.length == 2) {\\n                require(_path[1] == arrShortIndexToken[0], \\\"To open the short position, you have to use USDC as collateral\\\");\\n            }\\n            if (_path[0] != arrShortIndexToken[0]) {\\n                address tokenIn = _path[0];\\n                _path = new address[](2);\\n                _path[0] = tokenIn;\\n                _path[1] = arrShortIndexToken[0];\\n            }\\n        }\\n        Doppelganger(doppelgangerMap[msg.sender]).createIncreasePositionETH{value: msg.value}(\\n            msg.sender,\\n            _path,\\n            _indexToken,\\n            _amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            _referralCode,\\n            ddl_gmx\\n        );\\n    }\\n\\n    /**\\n     * @notice used to decrease position on GMX\\n     **/\\n    function createDecreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH\\n    ) external payable checkDoppelganger {\\n        Doppelganger(doppelgangerMap[msg.sender]).createDecreasePosition{value: msg.value}(\\n            msg.sender,\\n            _path,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _minOut,\\n            _executionFee,\\n            _withdrawETH,\\n            ddl_gmx\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x72b1acbc4bc3d05b1c2b217ce419463e047a467eea01893065f6b9a93e88ad34\",\"license\":\"GPL-3.0-or-later\"},\"contracts/Doppelganger.sol\":{\"content\":\"/**\\n * SPDX-License-Identifier: GPL-3.0-or-later\\n * DeDeLend\\n * Copyright (C) 2022 DeDeLend\\n *\\n * This program is free software: you can redistribute it and/or modify\\n * it under the terms of the GNU General Public License as published by\\n * the Free Software Foundation, either version 3 of the License, or\\n * (at your option) any later version.\\n *\\n * This program is distributed in the hope that it will be useful,\\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n * GNU General Public License for more details.\\n *\\n * You should have received a copy of the GNU General Public License\\n * along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n **/\\n\\npragma solidity 0.8.6||0.6.12;\\n\\nimport \\\"./interfaces/IPositionRouter.sol\\\";\\nimport \\\"./interfaces/IRouter.sol\\\";\\nimport \\\"./interfaces/IAccountManager.sol\\\";\\nimport \\\"./interfaces/IVault.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Doppelganger {\\n    using SafeERC20 for IERC20;\\n\\n    receive() external payable{}\\n\\n    IPositionRouter public positionRouter;\\n    mapping(address => mapping(bool => uint256)) public keyByIndexToken;\\n    mapping(uint256  => bool) public keys;\\n    ERC721 public GMXPT;\\n    address public immutable router;\\n    address[4] public indexTokenArray;\\n    address[4] public stablecoinsArray;\\n    address public accountManager;\\n    address public ddl_gmx;\\n    bool public isApproved = false;\\n    address public manager;\\n\\n    constructor(\\n        IPositionRouter _positionRouter,\\n        address _router,\\n        uint256[2] memory keyArray,\\n        address[4] memory _indexTokenArray,\\n        address[4] memory _stablecoinsArray,\\n        address _accountManager,\\n        address _accountManagerToken,\\n        address _ddl_gmx,\\n        address _manager\\n    ) {\\n        positionRouter = _positionRouter;\\n        router = _router;\\n        indexTokenArray = _indexTokenArray;\\n        stablecoinsArray = _stablecoinsArray;\\n        keyByIndexToken[_indexTokenArray[0]][true] = keyArray[0];\\n        keyByIndexToken[_indexTokenArray[0]][false] = keyArray[1];\\n        keys[keyArray[0]] = true; \\n        keys[keyArray[1]] = true; \\n        GMXPT = ERC721(_accountManagerToken);\\n        accountManager = _accountManager;\\n        ddl_gmx = _ddl_gmx;\\n        manager = _manager;\\n    }\\n\\n    function withdrawETH() public {\\n        require(msg.sender == manager, \\\"you are not a manager\\\");\\n        payable(manager).transfer(address(this).balance);\\n    }\\n\\n    function withdrawERC20(address token) public {\\n        require(msg.sender == manager, \\\"you are not a manager\\\");\\n        ERC20(token).transfer(manager, ERC20(token).balanceOf(address(this)));\\n    }\\n\\n    function _checkKeyAndMsgSender(address user, address _indexToken, bool _isLong) view private {\\n        require(\\n            GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]) == user,\\n            \\\"You re not the owner of the position\\\"\\n        );\\n        require(keys[keyByIndexToken[_indexToken][_isLong]], \\\"invalid key\\\");\\n        if (msg.sender != ddl_gmx) {\\n            require(msg.sender == accountManager, \\\"invalid msg.sender\\\");\\n        }\\n    }\\n\\n    function createIncreasePosition(\\n        address user,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        positionRouter.createIncreasePosition{value: msg.value}(\\n            _path,\\n            _indexToken,\\n            _amountIn,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            _referralCode,\\n            _callbackTarget\\n        );\\n    }\\n\\n    function createIncreasePositionETH(\\n        address user,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable {\\n        _checkKeyAndMsgSender(user, _indexToken, _isLong);\\n        positionRouter.createIncreasePositionETH{value: msg.value}(\\n            _path,\\n            _indexToken,\\n            _minOut,\\n            _sizeDelta,\\n            _isLong,\\n            _acceptablePrice,\\n            _executionFee,\\n            _referralCode,\\n            _callbackTarget\\n        );\\n    }\\n\\n    function createDecreasePosition(\\n        address user,\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH,\\n        address _callbackTarget\\n    ) external payable {\\n        address keyOwner = GMXPT.ownerOf(keyByIndexToken[_indexToken][_isLong]);\\n        require(keyOwner == user, \\\"You are not the owner of the position\\\");\\n        if (msg.sender != ddl_gmx) {\\n            require(msg.sender == accountManager, \\\"invalid msg.sender\\\");\\n        }\\n        if (msg.sender == ddl_gmx) {\\n            keyOwner = address(this);\\n        }\\n        positionRouter.createDecreasePosition{value: msg.value}(\\n            _path,\\n            _indexToken,\\n            _collateralDelta,\\n            _sizeDelta,\\n            _isLong,\\n            keyOwner,\\n            _acceptablePrice,\\n            _minOut,\\n            _executionFee,\\n            _withdrawETH,\\n            _callbackTarget\\n        );\\n    }\\n\\n    /**\\n     * @param value maxUnit256\\n     **/\\n    function approveAll(uint256 value) public {\\n        IRouter(router).approvePlugin(address(positionRouter));\\n        for (uint256 i = 0; i < 4; i++) {\\n            ERC20(indexTokenArray[i]).approve(address(positionRouter), value);\\n            ERC20(indexTokenArray[i]).approve(router, value);\\n            ERC20(stablecoinsArray[i]).approve(address(positionRouter), value);\\n            ERC20(stablecoinsArray[i]).approve(router, value);\\n        }\\n        ERC20(stablecoinsArray[0]).approve(ddl_gmx, value);\\n        isApproved = true;\\n    }\\n}\\n\",\"keccak256\":\"0x2398cdf45d9b9bd467ae8e95fe0ac2c9b45ae41a5a5056e40e0c3505f2fb036a\",\"license\":\"GPL-3.0-or-later\"},\"contracts/interfaces/IAccountManager.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\ninterface IAccountManager {\\n    enum Symbols {\\n        ETH_USD_LONG,\\n        ETH_USD_SHORT\\n    }\\n    function keyData(uint256 id) external returns (\\n        Symbols symbol, \\n        address doppelgangerContract, \\n        bool isLong,\\n        address indexToken,\\n        address user\\n    );\\n    function indexTokenBySymbol(Symbols symbol) external returns (address indexToken);\\n    function getPositionDelta(uint256 id) external view returns (bool isProfit, uint256 profit);\\n    function getPosition(uint256 id) external view returns (\\n        uint256 size, \\n        uint256 collateral, \\n        uint256 averagePrice, \\n        uint256 entryFundingRate, \\n        uint256 reserveAmount, \\n        uint256 realisedPnl,\\n        bool isProfit, \\n        uint256 lastIncreasedTime\\n    );\\n    function currentPrice(uint256 id) external view returns (uint256 price);\\n    function isLong(uint256 id) external view returns (bool);\\n}\",\"keccak256\":\"0xf1ef5609b4aa86f0ddaa9da9d68dc08862c19e1c200a976e306d09dbeca52a8e\"},\"contracts/interfaces/IAccountManagerToken.sol\":{\"content\":\"pragma solidity 0.8.6;\\n\\ninterface IAccountManagerToken {\\n    function mint(address to, uint256 id) external;\\n    function addTokenId(uint256 value) external;\\n    function tokenId() external returns (uint256);\\n}\",\"keccak256\":\"0x09315b038d6ecc380c256ce8d241e367882cdeb86ea48fb3eafcc451eb926d3b\"},\"contracts/interfaces/IOrderBook.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6 || 0.6.12;\\n\\ninterface IOrderBook {\\n\\tfunction getSwapOrder(address _account, uint256 _orderIndex) external view returns (\\n        address path0, \\n        address path1,\\n        address path2,\\n        uint256 amountIn,\\n        uint256 minOut,\\n        uint256 triggerRatio,\\n        bool triggerAboveThreshold,\\n        bool shouldUnwrap,\\n        uint256 executionFee\\n    );\\n\\n    function getIncreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address purchaseToken, \\n        uint256 purchaseTokenAmount,\\n        address collateralToken,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function getDecreaseOrder(address _account, uint256 _orderIndex) external view returns (\\n        address collateralToken,\\n        uint256 collateralDelta,\\n        address indexToken,\\n        uint256 sizeDelta,\\n        bool isLong,\\n        uint256 triggerPrice,\\n        bool triggerAboveThreshold,\\n        uint256 executionFee\\n    );\\n\\n    function createIncreaseOrder(\\n        address[] memory _path,\\n        uint256 _amountIn,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold,\\n        uint256 _executionFee,\\n        bool _shouldWrap\\n    ) external payable;\\n    function cancelIncreaseOrder(uint256 _orderIndex) external;\\n    function executeIncreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) external;\\n    function updateIncreaseOrder(uint256 _orderIndex, uint256 _sizeDelta, uint256 _triggerPrice, bool _triggerAboveThreshold) external;\\n\\n    function createDecreaseOrder(\\n        address _indexToken,\\n        uint256 _sizeDelta,\\n        address _collateralToken,\\n        uint256 _collateralDelta,\\n        bool _isLong,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) external payable;\\n    function executeDecreaseOrder(address _address, uint256 _orderIndex, address payable _feeReceiver) external;\\n    function cancelDecreaseOrder(uint256 _orderIndex) external;\\n    function updateDecreaseOrder(\\n        uint256 _orderIndex,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        uint256 _triggerPrice,\\n        bool _triggerAboveThreshold\\n    ) external;\\n\\n    function minExecutionFee() external view returns (uint256 minExecutionFee);\\n}\\n\",\"keccak256\":\"0x00c439d23a66e4e44ec7e16dc8d46e2fe041c3ae2bbd72ce70172dd8d781c766\",\"license\":\"MIT\"},\"contracts/interfaces/IPositionRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6 || 0.6.12;\\n\\ninterface IPositionRouter {\\n    function increasePositionRequestKeysStart() external returns (uint256);\\n    function decreasePositionRequestKeysStart() external returns (uint256);\\n    function executeIncreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n    function executeIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function executeDecreasePositions(uint256 _count, address payable _executionFeeReceiver) external;\\n    function cancelIncreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function executeDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function cancelDecreasePosition(bytes32 _key, address payable _executionFeeReceiver) external;\\n    function createIncreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _amountIn,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable;\\n    function createIncreasePositionETH(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _minOut,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        uint256 _acceptablePrice,\\n        uint256 _executionFee,\\n        bytes32 _referralCode,\\n        address _callbackTarget\\n    ) external payable;\\n    function createDecreasePosition(\\n        address[] memory _path,\\n        address _indexToken,\\n        uint256 _collateralDelta,\\n        uint256 _sizeDelta,\\n        bool _isLong,\\n        address _receiver,\\n        uint256 _acceptablePrice,\\n        uint256 _minOut,\\n        uint256 _executionFee,\\n        bool _withdrawETH,\\n        address _callbackTarget\\n    ) external payable;\\n    function minExecutionFee() external view returns (uint256 minExecutionFee);\\n    function getRequestKey(address _account, uint256 _index) external pure returns (bytes32);\\n    function decreasePositionsIndex(address _account) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x70910123732b5068f4c441f9f65aef17ee660bbf8ad17ac94f5170398dc6b826\",\"license\":\"MIT\"},\"contracts/interfaces/IRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.6 || 0.6.12;\\n\\ninterface IRouter {\\n    function addPlugin(address _plugin) external;\\n    function pluginTransfer(address _token, address _account, address _receiver, uint256 _amount) external;\\n    function pluginIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function pluginDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function swap(address[] memory _path, uint256 _amountIn, uint256 _minOut, address _receiver) external;\\n    function approvePlugin(address _plugin) external;\\n}\\n\",\"keccak256\":\"0x8496939c59721c4414a6825788f56df0479e491374a8459c8a4d731577f07fae\",\"license\":\"MIT\"},\"contracts/interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12 || 0.8.6;\\n\\nimport \\\"./IVaultUtils.sol\\\";\\n\\ninterface IVault {\\n    function isInitialized() external view returns (bool);\\n    function isSwapEnabled() external view returns (bool);\\n    function isLeverageEnabled() external view returns (bool);\\n\\n    function setVaultUtils(IVaultUtils _vaultUtils) external;\\n    function setError(uint256 _errorCode, string calldata _error) external;\\n\\n    function router() external view returns (address);\\n    function usdg() external view returns (address);\\n    function gov() external view returns (address);\\n\\n    function whitelistedTokenCount() external view returns (uint256);\\n    function maxLeverage() external view returns (uint256);\\n    function adjustForDecimals(uint256 _amount, address _tokenDiv, address _tokenMul) external view returns (uint256);\\n\\n    function minProfitTime() external view returns (uint256);\\n    function hasDynamicFees() external view returns (bool);\\n    function fundingInterval() external view returns (uint256);\\n    function totalTokenWeights() external view returns (uint256);\\n    function getTargetUsdgAmount(address _token) external view returns (uint256);\\n\\n    function inManagerMode() external view returns (bool);\\n    function inPrivateLiquidationMode() external view returns (bool);\\n\\n    function maxGasPrice() external view returns (uint256);\\n\\n    function approvedRouters(address _account, address _router) external view returns (bool);\\n    function isLiquidator(address _account) external view returns (bool);\\n    function isManager(address _account) external view returns (bool);\\n\\n    function minProfitBasisPoints(address _token) external view returns (uint256);\\n    function tokenBalances(address _token) external view returns (uint256);\\n    function lastFundingTimes(address _token) external view returns (uint256);\\n\\n    function setMaxLeverage(uint256 _maxLeverage) external;\\n    function setInManagerMode(bool _inManagerMode) external;\\n    function setManager(address _manager, bool _isManager) external;\\n    function setIsSwapEnabled(bool _isSwapEnabled) external;\\n    function setIsLeverageEnabled(bool _isLeverageEnabled) external;\\n    function setMaxGasPrice(uint256 _maxGasPrice) external;\\n    function setUsdgAmount(address _token, uint256 _amount) external;\\n    function setBufferAmount(address _token, uint256 _amount) external;\\n    function setMaxGlobalShortSize(address _token, uint256 _amount) external;\\n    function setInPrivateLiquidationMode(bool _inPrivateLiquidationMode) external;\\n    function setLiquidator(address _liquidator, bool _isActive) external;\\n\\n    function setFundingRate(uint256 _fundingInterval, uint256 _fundingRateFactor, uint256 _stableFundingRateFactor) external;\\n\\n    function setFees(\\n        uint256 _taxBasisPoints,\\n        uint256 _stableTaxBasisPoints,\\n        uint256 _mintBurnFeeBasisPoints,\\n        uint256 _swapFeeBasisPoints,\\n        uint256 _stableSwapFeeBasisPoints,\\n        uint256 _marginFeeBasisPoints,\\n        uint256 _liquidationFeeUsd,\\n        uint256 _minProfitTime,\\n        bool _hasDynamicFees\\n    ) external;\\n\\n    function setTokenConfig(\\n        address _token,\\n        uint256 _tokenDecimals,\\n        uint256 _redemptionBps,\\n        uint256 _minProfitBps,\\n        uint256 _maxUsdgAmount,\\n        bool _isStable,\\n        bool _isShortable\\n    ) external;\\n\\n    function setPriceFeed(address _priceFeed) external;\\n    function withdrawFees(address _token, address _receiver) external returns (uint256);\\n\\n    function directPoolDeposit(address _token) external;\\n    function buyUSDG(address _token, address _receiver) external returns (uint256);\\n    function sellUSDG(address _token, address _receiver) external returns (uint256);\\n    function swap(address _tokenIn, address _tokenOut, address _receiver) external returns (uint256);\\n    function increasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external;\\n    function decreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external returns (uint256);\\n    function liquidatePosition(address _account, address _collateralToken, address _indexToken, bool _isLong, address _feeReceiver) external;\\n    function tokenToUsdMin(address _token, uint256 _tokenAmount) external view returns (uint256);\\n\\n    function priceFeed() external view returns (address);\\n    function fundingRateFactor() external view returns (uint256);\\n    function stableFundingRateFactor() external view returns (uint256);\\n    function cumulativeFundingRates(address _token) external view returns (uint256);\\n    function getNextFundingRate(address _token) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n\\n    function liquidationFeeUsd() external view returns (uint256);\\n    function taxBasisPoints() external view returns (uint256);\\n    function stableTaxBasisPoints() external view returns (uint256);\\n    function mintBurnFeeBasisPoints() external view returns (uint256);\\n    function swapFeeBasisPoints() external view returns (uint256);\\n    function stableSwapFeeBasisPoints() external view returns (uint256);\\n    function marginFeeBasisPoints() external view returns (uint256);\\n\\n    function allWhitelistedTokensLength() external view returns (uint256);\\n    function allWhitelistedTokens(uint256) external view returns (address);\\n    function whitelistedTokens(address _token) external view returns (bool);\\n    function stableTokens(address _token) external view returns (bool);\\n    function shortableTokens(address _token) external view returns (bool);\\n    function feeReserves(address _token) external view returns (uint256);\\n    function globalShortSizes(address _token) external view returns (uint256);\\n    function globalShortAveragePrices(address _token) external view returns (uint256);\\n    function maxGlobalShortSizes(address _token) external view returns (uint256);\\n    function tokenDecimals(address _token) external view returns (uint256);\\n    function tokenWeights(address _token) external view returns (uint256);\\n    function guaranteedUsd(address _token) external view returns (uint256);\\n    function poolAmounts(address _token) external view returns (uint256);\\n    function bufferAmounts(address _token) external view returns (uint256);\\n    function reservedAmounts(address _token) external view returns (uint256);\\n    function usdgAmounts(address _token) external view returns (uint256);\\n    function maxUsdgAmounts(address _token) external view returns (uint256);\\n    function getRedemptionAmount(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getMaxPrice(address _token) external view returns (uint256);\\n    function getMinPrice(address _token) external view returns (uint256);\\n\\n    function getDelta(address _indexToken, uint256 _size, uint256 _averagePrice, bool _isLong, uint256 _lastIncreasedTime) external view returns (bool, uint256);\\n    function getPosition(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256, uint256, uint256, uint256, uint256, uint256, bool, uint256);\\n    function getPositionDelta(address _account, address _collateralToken, address _indexToken, bool _isLong) external view returns (bool, uint256);\\n    function getPositionFee(uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _token, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function usdToTokenMin(address _token, uint256 _usdAmount) external view returns (uint256);\\n    function vaultUtils() external returns(IVaultUtils vaultUtils);\\n    function BASIS_POINTS_DIVISOR() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x28a0d0cba706c5aba7de5cff792e2bb3db0dd0171977fcc0d04ee660d5a96efc\",\"license\":\"MIT\"},\"contracts/interfaces/IVaultUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.12 || 0.8.6;\\n\\ninterface IVaultUtils {\\n    function updateCumulativeFundingRate(address _collateralToken, address _indexToken) external returns (bool);\\n    function validateIncreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _sizeDelta, bool _isLong) external view;\\n    function validateDecreasePosition(address _account, address _collateralToken, address _indexToken, uint256 _collateralDelta, uint256 _sizeDelta, bool _isLong, address _receiver) external view;\\n    function validateLiquidation(address _account, address _collateralToken, address _indexToken, bool _isLong, bool _raise) external view returns (uint256, uint256);\\n    function getEntryFundingRate(address _collateralToken, address _indexToken, bool _isLong) external view returns (uint256);\\n    function getPositionFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _sizeDelta) external view returns (uint256);\\n    function getFundingFee(address _account, address _collateralToken, address _indexToken, bool _isLong, uint256 _size, uint256 _entryFundingRate) external view returns (uint256);\\n    function getBuyUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSellUsdgFeeBasisPoints(address _token, uint256 _usdgAmount) external view returns (uint256);\\n    function getSwapFeeBasisPoints(address _tokenIn, address _tokenOut, uint256 _usdgAmount) external view returns (uint256);\\n    function getFeeBasisPoints(address _token, uint256 _usdgDelta, uint256 _feeBasisPoints, uint256 _taxBasisPoints, bool _increment) external view returns (uint256);\\n    function BASIS_POINTS_DIVISOR() external returns (uint256);\\n}\\n\",\"keccak256\":\"0x8df03708cc9172cf58802be82c595cac70b07d859e2f1817068d0843155d0804\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200408f3803806200408f833981016040819052620000359162000339565b6200004033620001cf565b6001600160601b0319606089811b821660805288811b821660a05287811b821660c05286901b1660e0526200007960088560046200021f565b5062000089600c8460046200021f565b5083516001600160a01b0390811660009081526004602081815260408084206001808652908352818520805460ff199081169091559851861685529282528084208480528252832080548816831790558551600682527f54cdd369e4e8a8515e52ca72ec816c2101831ad1f18bf44102ed171459c9b4f880548916911515919091179055948501518183527f3e5fec24aa4dc4e5aee2e025e51e1392c72a2500577559fae9665c6d52bd6a3180549115159190971617909555855181805260059094527f05b8ccbb9d4d8fb16ea74ce3c29a41f1b461fbdaff4714a0d9a8eb05499746bc80549483166001600160a01b03199586161790559451939094527f1471eb6eb2c5e789fc3de43f8ce62938c7d1836ec861730447e2ada8fd81017b80548316938516939093179092556007805490911691909216179055506200049d92505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b82600481019282156200026a579160200282015b828111156200026a57825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000233565b50620002789291506200027c565b5090565b5b808211156200027857600081556001016200027d565b8051620002a08162000484565b919050565b600082601f830112620002b757600080fd5b604051608081016001600160401b0381118282101715620002e857634e487b7160e01b600052604160045260246000fd5b604052808360808101861015620002fe57600080fd5b60005b60048110156200032e578151620003188162000484565b8352602092830192919091019060010162000301565b509195945050505050565b6000806000806000806000806101e0898b0312156200035757600080fd5b8851620003648162000484565b809850506020808a0151620003798162000484565b60408b01519098506200038c8162000484565b60608b01519097506200039f8162000484565b9550620003b08b60808c01620002a5565b9450620003c28b6101008c01620002a5565b93508a61019f8b0112620003d557600080fd5b620003df6200044d565b806101808c016101c08d018e811115620003f857600080fd5b6000805b600281101562000429578351801515811462000416578283fd5b86529486019492860192600101620003fc565b5050829650620004398162000293565b955050505050509295985092959890939650565b604080519081016001600160401b03811182821017156200047e57634e487b7160e01b600052604160045260246000fd5b60405290565b6001600160a01b03811681146200049a57600080fd5b50565b60805160601c60a05160601c60c05160601c60e05160601c613b5862000537600039600081816102f00152610e2c0152600081816106c40152818161076401528181610b1d01528181611168015281816112210152818161130c015261174301526000818161068e0152610e4e0152600081816104f901528181610cb701528181610d6501528181610e7a01526110510152613b586000f3fe608060405260043610620001be5760003560e01c80639e71527d11620000ff578063e6e6dd2f1162000095578063f2fde38b116200006c578063f2fde38b1462000655578063f887ea40146200067a578063fbfa77cf14620006b0578063fec56fe014620006e657600080fd5b8063e6e6dd2f1462000557578063e91649c014620005cd578063eb02c30114620005f257600080fd5b8063b7d3211011620000d6578063b7d3211014620004ab578063be15286114620004e5578063c9874170146200051b578063d0ebdbe7146200053257600080fd5b80639e71527d1462000411578063a226b4831462000436578063a4cf54a2146200047157600080fd5b8063481c6a7511620001755780636c5e2fd9116200014c5780636c5e2fd91462000357578063715018a614620003a55780637a3c4c1714620003bd5780638da5cb5b14620003f157600080fd5b8063481c6a7514620002ba57806361ef161f14620002dc5780636476b837146200031257600080fd5b80630b8b47fe14620001c35780630cd790f714620001dc578063176ddd3a146200021b5780633264fee5146200024057806332d53b171462000265578063449bd2cc14620002a2575b600080fd5b620001da620001d436600462001d8c565b620006fd565b005b348015620001e957600080fd5b50600154620001fe906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b3480156200022857600080fd5b50620001fe6200023a36600462001ebf565b62000ab5565b3480156200024d57600080fd5b50620001da6200025f36600462001c7b565b62000ad6565b3480156200027257600080fd5b506200028a6200028436600462001ebf565b62000b02565b60408051921515835260208301919091520162000212565b348015620002af57600080fd5b50620001da62000c37565b348015620002c757600080fd5b50600754620001fe906001600160a01b031681565b348015620002e957600080fd5b50620001fe7f000000000000000000000000000000000000000000000000000000000000000081565b3480156200031f57600080fd5b50620003466200033136600462001e82565b60066020526000908152604090205460ff1681565b604051901515815260200162000212565b3480156200036457600080fd5b50620003966200037636600462001ca0565b600460209081526000928352604080842090915290825290205460ff1681565b604051620002129190620021c6565b348015620003b257600080fd5b50620001da620010ff565b348015620003ca57600080fd5b50620003e2620003dc36600462001ebf565b62001117565b60405190815260200162000212565b348015620003fe57600080fd5b506000546001600160a01b0316620001fe565b3480156200041e57600080fd5b50620001da6200043036600462001ea0565b62001253565b3480156200044357600080fd5b50620003466200045536600462001ebf565b600090815260036020526040902054600160a81b900460ff1690565b3480156200047e57600080fd5b50620001fe6200049036600462001c7b565b6002602052600090815260409020546001600160a01b031681565b348015620004b857600080fd5b50620001fe620004ca36600462001e82565b6005602052600090815260409020546001600160a01b031681565b348015620004f257600080fd5b50620001fe7f000000000000000000000000000000000000000000000000000000000000000081565b620001da6200052c36600462001d8c565b620012ae565b3480156200053f57600080fd5b50620001da6200055136600462001c7b565b620016df565b3480156200056457600080fd5b50620005ba6200057636600462001ebf565b60036020526000908152604090208054600182015460029092015460ff808316936001600160a01b036101008504811694600160a81b900490921692908216911685565b60405162000212959493929190620021d6565b348015620005da57600080fd5b50620001fe620005ec36600462001ebf565b6200170b565b348015620005ff57600080fd5b50620006176200061136600462001ebf565b6200171c565b604080519889526020890197909752958701949094526060860192909252608085015260a0840152151560c083015260e08201526101000162000212565b3480156200066257600080fd5b50620001da6200067436600462001c7b565b62001881565b3480156200068757600080fd5b50620001fe7f000000000000000000000000000000000000000000000000000000000000000081565b348015620006bd57600080fd5b50620001fe7f000000000000000000000000000000000000000000000000000000000000000081565b620001da620006f736600462001cdc565b62001900565b336000908152600260205260409020546001600160a01b03166200073e5760405162461bcd60e51b8152600401620007359062002217565b60405180910390fd5b6200074a888562001a07565b336000908152600260205260408120546001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691634a3f088d911687620007a5576008546001600160a01b0316620007b2565b600c546001600160a01b03165b60085460405160e085901b6001600160e01b0319168152620007e69392916001600160a01b0316908b159060040162001ff7565b6101006040518083038186803b1580156200080057600080fd5b505afa15801562000815573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200083b919062001ef3565b50505050509250505080600014620008675760405162461bcd60e51b81526004016200073590620022ab565b84620009e557895160021415620008d057600c548a516001600160a01b03909116908b9060019081106200089f576200089f62002366565b60200260200101516001600160a01b031614620008d05760405162461bcd60e51b815260040162000735906200224e565b600c548a516001600160a01b03909116908b90600090620008f557620008f562002366565b60200260200101516001600160a01b031614620009e55760008a60008151811062000924576200092462002366565b60200260200101519050600267ffffffffffffffff8111156200094b576200094b6200237c565b60405190808252806020026020018201604052801562000975578160200160208202803683370190505b509a50808b6000815181106200098f576200098f62002366565b6001600160a01b039283166020918202929092010152600c548c519116908c906001908110620009c357620009c362002366565b60200260200101906001600160a01b031690816001600160a01b031681525050505b60026000336001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b031663da91dfd534338d8d8d8d8d8d8d8d8d600160009054906101000a90046001600160a01b03166040518d63ffffffff1660e01b815260040162000a759b9a9998979695949392919062002099565b6000604051808303818588803b15801562000a8f57600080fd5b505af115801562000aa4573d6000803e3d6000fd5b505050505050505050505050505050565b600c816004811062000ac657600080fd5b01546001600160a01b0316905081565b62000ae062001ac2565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60008181526003602052604081205481906001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116916345a6f370916101008204169060ff600160a81b9091041662000b6e57600c546001600160a01b031662000b8a565b6000868152600360205260409020600101546001600160a01b03165b6000878152600360205260409081902060018101549054915160e086901b6001600160e01b031916815262000bdb9493926001600160a01b0390921691600160a81b900460ff169060040162001ff7565b604080518083038186803b15801562000bf357600080fd5b505afa15801562000c08573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000c2e919062001e51565b91509150915091565b336000908152600260205260409020546001600160a01b03161562000cb35760405162461bcd60e51b815260206004820152602b60248201527f446f7070656c67616e67657220666f722074686973206164647265737320616c60448201526a1c9958591e48195e1a5cdd60aa1b606482015260840162000735565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166317d70f7c6040518163ffffffff1660e01b8152600401602060405180830381600087803b15801562000d1157600080fd5b505af115801562000d26573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000d4c919062001ed9565b60405163fd0d101f60e01b8152600260048201529091507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03169063fd0d101f90602401600060405180830381600087803b15801562000db257600080fd5b505af115801562000dc7573d6000803e3d6000fd5b5050505062000dd562001b6e565b60005b600281101562000e1d5762000dee818462002301565b82826002811062000e035762000e0362002366565b60200201528062000e14816200231c565b91505062000dd8565b506001546007546040516000927f0000000000000000000000000000000000000000000000000000000000000000927f0000000000000000000000000000000000000000000000000000000000000000928692600892600c9230927f0000000000000000000000000000000000000000000000000000000000000000926001600160a01b039182169291169062000eb49062001b8c565b62000ec8999897969594939291906200210f565b604051809103906000f08015801562000ee5573d6000803e3d6000fd5b5033600090815260026020526040812080546001600160a01b0319166001600160a01b0384161790559091505b6002811015620010f9576040518060a0016040528082600181111562000f3c5762000f3c62002350565b600181111562000f505762000f5062002350565b8152602001836001600160a01b031681526020016001831062000f7557600062000f78565b60015b151581526008546001600160a01b03166020820152336040909101526003600062000fa4848862002301565b8152602081019190915260400160002081518154829060ff19166001838181111562000fd45762000fd462002350565b02179055506020820151815460408401511515600160a81b0260ff60a81b196001600160a01b039384166101000216610100600160b01b03199092169190911717825560608301516001830180549183166001600160a01b03199283161790556080909301516002909201805492821692909316919091179091557f0000000000000000000000000000000000000000000000000000000000000000166340c10f193362001083848862002301565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401600060405180830381600087803b158015620010ca57600080fd5b505af1158015620010df573d6000803e3d6000fd5b505050508080620010f0906200231c565b91505062000f12565b50505050565b6200110962001ac2565b62001115600062001b1e565b565b600081815260036020526040812054600160a81b900460ff1615620011ef5760008281526003602052604090819020600101549051637092736960e11b81526001600160a01b0391821660048201527f00000000000000000000000000000000000000000000000000000000000000009091169063e124e6d2906024015b60206040518083038186803b158015620011ae57600080fd5b505afa158015620011c3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620011e9919062001ed9565b92915050565b600082815260036020526040908190206001015490516340d3096b60e11b81526001600160a01b0391821660048201527f0000000000000000000000000000000000000000000000000000000000000000909116906381a612d69060240162001195565b6200125d62001ac2565b806006600084600181111562001277576200127762002350565b60018111156200128b576200128b62002350565b81526020810191909152604001600020805460ff19169115159190911790555050565b336000908152600260205260409020546001600160a01b0316620012e65760405162461bcd60e51b8152600401620007359062002217565b620012f2888562001a07565b336000908152600260205260408120546001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691634a3f088d9116876200134d576008546001600160a01b03166200135a565b600c546001600160a01b03165b60085460405160e085901b6001600160e01b03191681526200138e9392916001600160a01b0316908b159060040162001ff7565b6101006040518083038186803b158015620013a857600080fd5b505afa158015620013bd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620013e3919062001ef3565b505050505092505050806000146200140f5760405162461bcd60e51b81526004016200073590620022ab565b846200158d578951600214156200147857600c548a516001600160a01b03909116908b90600190811062001447576200144762002366565b60200260200101516001600160a01b031614620014785760405162461bcd60e51b815260040162000735906200224e565b600c548a516001600160a01b03909116908b906000906200149d576200149d62002366565b60200260200101516001600160a01b0316146200158d5760008a600081518110620014cc57620014cc62002366565b60200260200101519050600267ffffffffffffffff811115620014f357620014f36200237c565b6040519080825280602002602001820160405280156200151d578160200160208202803683370190505b509a50808b60008151811062001537576200153762002366565b6001600160a01b039283166020918202929092010152600c548c519116908c9060019081106200156b576200156b62002366565b60200260200101906001600160a01b031690816001600160a01b031681525050505b89600081518110620015a357620015a362002366565b60209081029190910181015133600081815260029093526040928390205492516323b872dd60e01b815260048101919091526001600160a01b039283166024820152604481018b90529116906323b872dd90606401602060405180830381600087803b1580156200161357600080fd5b505af115801562001628573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200164e919062001e31565b5060026000336001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b0316634fbb66c334338d8d8d8d8d8d8d8d8d600160009054906101000a90046001600160a01b03166040518d63ffffffff1660e01b815260040162000a759b9a9998979695949392919062002099565b620016e962001ac2565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b6008816004811062000ac657600080fd5b60008181526003602052604081205481908190819081908190819081906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691634a3f088d916101008204169060ff600160a81b909104166200179457600c546001600160a01b0316620017b0565b60008c8152600360205260409020600101546001600160a01b03165b60008d8152600360205260409081902060018101549054915160e086901b6001600160e01b0319168152620018019493926001600160a01b0390921691600160a81b900460ff169060040162001ff7565b6101006040518083038186803b1580156200181b57600080fd5b505afa15801562001830573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062001856919062001ef3565b809850819950829a50839b50849c50859d50869e50879f505050505050505050919395975091939597565b6200188b62001ac2565b6001600160a01b038116620018f25760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840162000735565b620018fd8162001b1e565b50565b336000908152600260205260409020546001600160a01b0316620019385760405162461bcd60e51b8152600401620007359062002217565b60026000336001600160a01b03166001600160a01b0316815260200190815260200160002060009054906101000a90046001600160a01b03166001600160a01b0316636f7e879934338c8c8c8c8c8c8c8c8c600160009054906101000a90046001600160a01b03166040518d63ffffffff1660e01b8152600401620019c89b9a9998979695949392919062002021565b6000604051808303818588803b158015620019e257600080fd5b505af1158015620019f7573d6000803e3d6000fd5b5050505050505050505050505050565b6001600160a01b038216600090815260046020908152604080832084151584529091528120546006919060ff16600181111562001a485762001a4862002350565b600181111562001a5c5762001a5c62002350565b815260208101919091526040016000205460ff1662001abe5760405162461bcd60e51b815260206004820152601f60248201527f74726164696e67206f6e207468697320706169722069732073746f7070656400604482015260640162000735565b5050565b6000546001600160a01b03163314620011155760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640162000735565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60405180604001604052806002906020820280368337509192915050565b61178180620023a283390190565b80356001600160a01b038116811462001bb257600080fd5b919050565b600082601f83011262001bc957600080fd5b8135602067ffffffffffffffff8083111562001be95762001be96200237c565b8260051b604051601f19603f8301168101818110848211171562001c115762001c116200237c565b6040528481528381019250868401828801850189101562001c3157600080fd5b600092505b8583101562001c5f5762001c4a8162001b9a565b84529284019260019290920191840162001c36565b50979650505050505050565b80356002811062001bb257600080fd5b60006020828403121562001c8e57600080fd5b62001c998262001b9a565b9392505050565b6000806040838503121562001cb457600080fd5b62001cbf8362001b9a565b9150602083013562001cd18162002392565b809150509250929050565b60008060008060008060008060006101208a8c03121562001cfc57600080fd5b893567ffffffffffffffff81111562001d1457600080fd5b62001d228c828d0162001bb7565b99505062001d3360208b0162001b9a565b975060408a0135965060608a0135955060808a013562001d538162002392565b945060a08a0135935060c08a0135925060e08a013591506101008a013562001d7b8162002392565b809150509295985092959850929598565b60008060008060008060008060006101208a8c03121562001dac57600080fd5b893567ffffffffffffffff81111562001dc457600080fd5b62001dd28c828d0162001bb7565b99505062001de360208b0162001b9a565b975060408a0135965060608a0135955060808a0135945060a08a013562001e0a8162002392565b8094505060c08a0135925060e08a013591506101008a013590509295985092959850929598565b60006020828403121562001e4457600080fd5b815162001c998162002392565b6000806040838503121562001e6557600080fd5b825162001e728162002392565b6020939093015192949293505050565b60006020828403121562001e9557600080fd5b62001c998262001c6b565b6000806040838503121562001eb457600080fd5b62001cbf8362001c6b565b60006020828403121562001ed257600080fd5b5035919050565b60006020828403121562001eec57600080fd5b5051919050565b600080600080600080600080610100898b03121562001f1157600080fd5b885197506020890151965060408901519550606089015194506080890151935060a0890151925060c089015162001f488162002392565b8092505060e089015190509295985092959890939650565b8060005b6004811015620010f95781546001600160a01b031684526020909301926001918201910162001f64565b600081518084526020808501945080840160005b8381101562001fc95781516001600160a01b03168752958201959082019060010162001fa2565b509495945050505050565b6002811062001ff357634e487b7160e01b600052602160045260246000fd5b9052565b6001600160a01b039485168152928416602084015292166040820152901515606082015260800190565b6001600160a01b038c8116825261016060208301819052600091620020498483018f62001f8e565b9c81166040850152606084019b909b525050608081019790975294151560a087015260c086019390935260e085019190915261010084015215156101208301529091166101409091015292915050565b6001600160a01b038c8116825261016060208301819052600091620020c18483018f62001f8e565b9c81166040850152606084019b909b525050608081019790975260a087019590955292151560c086015260e08501919091526101008401526101208301529091166101409091015292915050565b6001600160a01b038a81168252891660208083019190915261020082019060408301908a60005b6002811015620021555781518452928201929082019060010162002136565b5050505062002168608083018962001f60565b6200217861010083018862001f60565b6001600160a01b0386166101808301526001600160a01b0385166101a08301526001600160a01b0384166101c08301526001600160a01b0383166101e08301529a9950505050505050505050565b60208101620011e9828462001fd4565b60a08101620021e6828862001fd4565b6001600160a01b03958616602083015293151560408201529184166060830152909216608090920191909152919050565b6020808252601b908201527f796f7520646f6e2774206861766520446f7070656c67616e6765720000000000604082015260600190565b6020808252603e908201527f546f206f70656e207468652073686f727420706f736974696f6e2c20796f752060408201527f6861766520746f20757365205553444320617320636f6c6c61746572616c0000606082015260800190565b60208082526036908201527f596f752063616e6e6f74206f70656e2061206c6f6e672f73686f727420706f736040820152756974696f6e206174207468652073616d652074696d6560501b606082015260800190565b600082198211156200231757620023176200233a565b500190565b60006000198214156200233357620023336200233a565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b8015158114620018fd57600080fdfe60a0604052600d805460ff60a01b191690553480156200001e57600080fd5b50604051620017813803806200178183398101604081905262000041916200026f565b600080546001600160a01b0319166001600160a01b038b16179055606088901b6001600160601b0319166080526200007c6004878162000155565b506200008c600886600462000155565b50865186516001600160a01b039081166000908152600160208181526040808420838552825280842095909555808c0180519b518516845282825285842084805282528584209b909b559a5182526002909a52828120805460ff199081168c1790915598518152919091208054909716909717909555600380549287166001600160a01b0319938416179055600c805493871693831693909317909255600d805492861692821692909217909155600e80549390941692169190911790915550620003cf915050565b8260048101928215620001a0579160200282015b82811115620001a057825182546001600160a01b0319166001600160a01b0390911617825560209092019160019091019062000169565b50620001ae929150620001b2565b5090565b5b80821115620001ae5760008155600101620001b3565b8051620001d681620003b6565b919050565b600082601f830112620001ed57600080fd5b604051608081016001600160401b03811182821017156200021e57634e487b7160e01b600052604160045260246000fd5b6040528083608081018610156200023457600080fd5b60005b6004811015620002645781516200024e81620003b6565b8352602092830192919091019060010162000237565b509195945050505050565b60008060008060008060008060006102008a8c0312156200028f57600080fd5b89516200029c81620003b6565b60208b0151909950620002af81620003b6565b9750605f8a018b13620002c157600080fd5b620002cb6200037f565b8060408c0160808d018e811115620002e257600080fd5b60005b600281101562000306578251855260209485019490920191600101620002e5565b50829a50620003168f82620001db565b9950505050506200032c8b6101008c01620001db565b94506200033d6101808b01620001c9565b93506200034e6101a08b01620001c9565b92506200035f6101c08b01620001c9565b9150620003706101e08b01620001c9565b90509295985092959850929598565b604080519081016001600160401b0381118282101715620003b057634e487b7160e01b600052604160045260246000fd5b60405290565b6001600160a01b0381168114620003cc57600080fd5b50565b60805160601c61137e6200040360003960008181610353015281816106650152818161079601526108ea015261137e6000f3fe6080604052600436106101015760003560e01c806361ef161f11610095578063d6ef601311610064578063d6ef6013146102d9578063da91dfd5146102f9578063e086e5ec1461030c578063f4f3b20014610321578063f887ea401461034157600080fd5b806361ef161f146102665780636f7e87991461028657806391c2c46914610299578063b7511c5b146102b957600080fd5b806313a51b2e116100d157806313a51b2e146101ca57806328f371aa14610210578063481c6a75146102315780634fbb66c31461025157600080fd5b806230e1b51461010d57806306b278cb1461014a5780630cb6aaf11461016a5780630cd790f7146101aa57600080fd5b3661010857005b600080fd5b34801561011957600080fd5b5061012d61012836600461111a565b610375565b6040516001600160a01b0390911681526020015b60405180910390f35b34801561015657600080fd5b5060035461012d906001600160a01b031681565b34801561017657600080fd5b5061019a61018536600461111a565b60026020526000908152604090205460ff1681565b6040519015158152602001610141565b3480156101b657600080fd5b50600d5461012d906001600160a01b031681565b3480156101d657600080fd5b506102026101e53660046110c4565b600160209081526000928352604080842090915290825290205481565b604051908152602001610141565b34801561021c57600080fd5b50600d5461019a90600160a01b900460ff1681565b34801561023d57600080fd5b50600e5461012d906001600160a01b031681565b61026461025f366004611015565b610395565b005b34801561027257600080fd5b5060005461012d906001600160a01b031681565b610264610294366004610f4d565b610423565b3480156102a557600080fd5b50600c5461012d906001600160a01b031681565b3480156102c557600080fd5b506102646102d436600461111a565b610643565b3480156102e557600080fd5b5061012d6102f436600461111a565b610a29565b610264610307366004611015565b610a39565b34801561031857600080fd5b50610264610a86565b34801561032d57600080fd5b5061026461033c366004610f0c565b610b14565b34801561034d57600080fd5b5061012d7f000000000000000000000000000000000000000000000000000000000000000081565b6008816004811061038557600080fd5b01546001600160a01b0316905081565b6103a08b8a87610c6e565b60005460405163f2ae372f60e01b81526001600160a01b039091169063f2ae372f9034906103e4908e908e908e908e908e908e908e908e908e908e90600401611265565b6000604051808303818588803b1580156103fd57600080fd5b505af1158015610411573d6000803e3d6000fd5b50505050505050505050505050505050565b6003546001600160a01b038a811660009081526001602090815260408083208b151584529091528082205490516331a9108f60e11b8152600481019190915290929190911690636352211e9060240160206040518083038186803b15801561048a57600080fd5b505afa15801561049e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104c29190610f30565b90508b6001600160a01b0316816001600160a01b0316146105385760405162461bcd60e51b815260206004820152602560248201527f596f7520617265206e6f7420746865206f776e6572206f662074686520706f7360448201526434ba34b7b760d91b60648201526084015b60405180910390fd5b600d546001600160a01b0316331461059957600c546001600160a01b031633146105995760405162461bcd60e51b815260206004820152601260248201527134b73b30b634b21036b9b39739b2b73232b960711b604482015260640161052f565b600d546001600160a01b03163314156105af5750305b60008054906101000a90046001600160a01b03166001600160a01b0316637be7d141348d8d8d8d8d888e8e8e8e8e6040518d63ffffffff1660e01b81526004016106039b9a99989796959493929190611190565b6000604051808303818588803b15801561061c57600080fd5b505af1158015610630573d6000803e3d6000fd5b5050505050505050505050505050505050565b6000546040516338c74dd960e01b81526001600160a01b0391821660048201527f0000000000000000000000000000000000000000000000000000000000000000909116906338c74dd990602401600060405180830381600087803b1580156106ab57600080fd5b505af11580156106bf573d6000803e3d6000fd5b5050505060005b600481101561098957600481600481106106e2576106e26112f9565b015460005460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b390604401602060405180830381600087803b15801561073157600080fd5b505af1158015610745573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061076991906110fd565b506004816004811061077d5761077d6112f9565b015460405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529091169063095ea7b390604401602060405180830381600087803b1580156107ea57600080fd5b505af11580156107fe573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061082291906110fd565b5060088160048110610836576108366112f9565b015460005460405163095ea7b360e01b81526001600160a01b0391821660048201526024810185905291169063095ea7b390604401602060405180830381600087803b15801561088557600080fd5b505af1158015610899573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108bd91906110fd565b50600881600481106108d1576108d16112f9565b015460405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018590529091169063095ea7b390604401602060405180830381600087803b15801561093e57600080fd5b505af1158015610952573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061097691906110fd565b5080610981816112d0565b9150506106c6565b50600854600d5460405163095ea7b360e01b81526001600160a01b0391821660048201526024810184905291169063095ea7b390604401602060405180830381600087803b1580156109da57600080fd5b505af11580156109ee573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a1291906110fd565b5050600d805460ff60a01b1916600160a01b179055565b6004816004811061038557600080fd5b610a448b8a87610c6e565b600054604051632dc4746360e11b81526001600160a01b0390911690635b88e8c69034906103e4908e908e908d908d908d908d908d908d908d90600401611203565b600e546001600160a01b03163314610ad85760405162461bcd60e51b81526020600482015260156024820152743cb7ba9030b932903737ba10309036b0b730b3b2b960591b604482015260640161052f565b600e546040516001600160a01b03909116904780156108fc02916000818181858888f19350505050158015610b11573d6000803e3d6000fd5b50565b600e546001600160a01b03163314610b665760405162461bcd60e51b81526020600482015260156024820152743cb7ba9030b932903737ba10309036b0b730b3b2b960591b604482015260640161052f565b600e546040516370a0823160e01b81523060048201526001600160a01b038381169263a9059cbb9291169083906370a082319060240160206040518083038186803b158015610bb457600080fd5b505afa158015610bc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bec9190611133565b6040516001600160e01b031960e085901b1681526001600160a01b0390921660048301526024820152604401602060405180830381600087803b158015610c3257600080fd5b505af1158015610c46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c6a91906110fd565b5050565b6003546001600160a01b0383811660009081526001602090815260408083208615158452909152908190205490516331a9108f60e11b81528287169390921691636352211e91610cc49160040190815260200190565b60206040518083038186803b158015610cdc57600080fd5b505afa158015610cf0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d149190610f30565b6001600160a01b031614610d765760405162461bcd60e51b8152602060048201526024808201527f596f75207265206e6f7420746865206f776e6572206f662074686520706f73696044820152633a34b7b760e11b606482015260840161052f565b6001600160a01b038216600090815260016020908152604080832084151584528252808320548352600290915290205460ff16610de35760405162461bcd60e51b815260206004820152600b60248201526a696e76616c6964206b657960a81b604482015260640161052f565b600d546001600160a01b03163314610e4457600c546001600160a01b03163314610e445760405162461bcd60e51b815260206004820152601260248201527134b73b30b634b21036b9b39739b2b73232b960711b604482015260640161052f565b505050565b8035610e5481611325565b919050565b600082601f830112610e6a57600080fd5b8135602067ffffffffffffffff80831115610e8757610e8761130f565b8260051b604051601f19603f83011681018181108482111715610eac57610eac61130f565b60405284815283810192508684018288018501891015610ecb57600080fd5b600092505b85831015610ef557610ee181610e49565b845292840192600192909201918401610ed0565b50979650505050505050565b8035610e548161133a565b600060208284031215610f1e57600080fd5b8135610f2981611325565b9392505050565b600060208284031215610f4257600080fd5b8151610f2981611325565b60008060008060008060008060008060006101608c8e031215610f6f57600080fd5b8b35610f7a81611325565b9a5060208c013567ffffffffffffffff811115610f9657600080fd5b610fa28e828f01610e59565b9a505060408c0135610fb381611325565b985060608c0135975060808c01359650610fcf60a08d01610f01565b955060c08c0135945060e08c013593506101008c01359250610ff46101208d01610f01565b91506110036101408d01610e49565b90509295989b509295989b9093969950565b60008060008060008060008060008060006101608c8e03121561103757600080fd5b8b3561104281611325565b9a5060208c013567ffffffffffffffff81111561105e57600080fd5b61106a8e828f01610e59565b9a505060408c013561107b81611325565b985060608c0135975060808c0135965060a08c0135955061109e60c08d01610f01565b945060e08c013593506101008c013592506101208c013591506110036101408d01610e49565b600080604083850312156110d757600080fd5b82356110e281611325565b915060208301356110f28161133a565b809150509250929050565b60006020828403121561110f57600080fd5b8151610f298161133a565b60006020828403121561112c57600080fd5b5035919050565b60006020828403121561114557600080fd5b5051919050565b600081518084526020808501945080840160005b838110156111855781516001600160a01b031687529582019590820190600101611160565b509495945050505050565b60006101608083526111a48184018f61114c565b6001600160a01b039d8e166020850152604084019c909c5250506060810198909852951515608088015293881660a087015260c086019290925260e0850152610100840152151561012083015290921661014090920191909152919050565b60006101208083526112178184018d61114c565b6001600160a01b039b8c166020850152604084019a909a5250506060810196909652931515608086015260a085019290925260c084015260e083015290921661010090920191909152919050565b60006101408083526112798184018e61114c565b6001600160a01b039c8d166020850152604084019b909b5250506060810197909752608087019590955292151560a086015260c085019190915260e084015261010083015290921661012090920191909152919050565b60006000198214156112f257634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0381168114610b1157600080fd5b8015158114610b1157600080fdfea26469706673582212208b5d9b3dd4de04619ca72737ed1bda9b455f606e01c1689a7a7b1d86df2a000264736f6c63430008060033a2646970667358221220b46da0517310d800c05ef976aee05418c0512b261e77a22be5220d5d67bd392264736f6c63430008060033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "currentPrice(uint256)": {
        "params": {
          "id": "position ID"
        }
      },
      "getPosition(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      },
      "getPositionDelta(uint256)": {
        "params": {
          "id": "collateral ID*"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setDDL_GMX(address)": {
        "params": {
          "value": "the address of DDL_GMX*"
        }
      },
      "setPermission(uint8,bool)": {
        "params": {
          "symbol": "symbol name",
          "value": "true or false *"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createDecreasePosition(address[],address,uint256,uint256,bool,uint256,uint256,uint256,bool)": {
        "notice": "used to decrease position on GMX*"
      },
      "createDoppelgangerGMX()": {
        "notice": "creates Doppelganger account for the user*"
      },
      "createIncreasePosition(address[],address,uint256,uint256,uint256,bool,uint256,uint256,bytes32)": {
        "notice": "used to increase position on GMX*"
      },
      "createIncreasePositionETH(address[],address,uint256,uint256,uint256,bool,uint256,uint256,bytes32)": {
        "notice": "used to increase position on GMX (only ETH)*"
      },
      "currentPrice(uint256)": {
        "notice": "returns currentPrice for the asset*"
      },
      "getPosition(uint256)": {
        "notice": "returns getPosition by the collateral"
      },
      "getPositionDelta(uint256)": {
        "notice": "returns getPositionDelta from GMX by the collateral ID"
      },
      "setDDL_GMX(address)": {
        "notice": "set new DDL_GMX address"
      },
      "setPermission(uint8,bool)": {
        "notice": "set permissions for trading pairs"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3670,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "ddl_gmx",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 3682,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "doppelgangerMap",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_address_payable)"
      },
      {
        "astId": 3700,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "keyData",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_struct(KeyInformation)3694_storage)"
      },
      {
        "astId": 3707,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "symbolByIndexToken",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_mapping(t_bool,t_enum(Symbols)5115))"
      },
      {
        "astId": 3713,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "indexTokenBySymbol",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_enum(Symbols)5115,t_address)"
      },
      {
        "astId": 3718,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "permissions",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_enum(Symbols)5115,t_bool)"
      },
      {
        "astId": 3720,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "manager",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3724,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "arrLongIndexToken",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_address)4_storage"
      },
      {
        "astId": 3728,
        "contract": "contracts/AccountManager.sol:AccountManager",
        "label": "arrShortIndexToken",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_address)4_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address)4_storage": {
        "base": "t_address",
        "encoding": "inplace",
        "label": "address[4]",
        "numberOfBytes": "128"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_enum(Symbols)5115": {
        "encoding": "inplace",
        "label": "enum IAccountManager.Symbols",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_address_payable)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address payable)",
        "numberOfBytes": "32",
        "value": "t_address_payable"
      },
      "t_mapping(t_address,t_mapping(t_bool,t_enum(Symbols)5115))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bool => enum IAccountManager.Symbols))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bool,t_enum(Symbols)5115)"
      },
      "t_mapping(t_bool,t_enum(Symbols)5115)": {
        "encoding": "mapping",
        "key": "t_bool",
        "label": "mapping(bool => enum IAccountManager.Symbols)",
        "numberOfBytes": "32",
        "value": "t_enum(Symbols)5115"
      },
      "t_mapping(t_enum(Symbols)5115,t_address)": {
        "encoding": "mapping",
        "key": "t_enum(Symbols)5115",
        "label": "mapping(enum IAccountManager.Symbols => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_enum(Symbols)5115,t_bool)": {
        "encoding": "mapping",
        "key": "t_enum(Symbols)5115",
        "label": "mapping(enum IAccountManager.Symbols => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_struct(KeyInformation)3694_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct AccountManager.KeyInformation)",
        "numberOfBytes": "32",
        "value": "t_struct(KeyInformation)3694_storage"
      },
      "t_struct(KeyInformation)3694_storage": {
        "encoding": "inplace",
        "label": "struct AccountManager.KeyInformation",
        "members": [
          {
            "astId": 3685,
            "contract": "contracts/AccountManager.sol:AccountManager",
            "label": "symbol",
            "offset": 0,
            "slot": "0",
            "type": "t_enum(Symbols)5115"
          },
          {
            "astId": 3687,
            "contract": "contracts/AccountManager.sol:AccountManager",
            "label": "doppelgangerContract",
            "offset": 1,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 3689,
            "contract": "contracts/AccountManager.sol:AccountManager",
            "label": "isLong",
            "offset": 21,
            "slot": "0",
            "type": "t_bool"
          },
          {
            "astId": 3691,
            "contract": "contracts/AccountManager.sol:AccountManager",
            "label": "indexToken",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 3693,
            "contract": "contracts/AccountManager.sol:AccountManager",
            "label": "user",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}